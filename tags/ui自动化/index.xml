<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UI自动化 on 茅测顿开</title>
    <link>https://yanbo92.github.io/tags/ui%E8%87%AA%E5%8A%A8%E5%8C%96/</link>
    <description>Recent content in UI自动化 on 茅测顿开</description>
    <image>
      <url>https://yanbo92.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yanbo92.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 28 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yanbo92.github.io/tags/ui%E8%87%AA%E5%8A%A8%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Auto.JS中杀死其他脚本的方法</title>
      <link>https://yanbo92.github.io/autojs-kill-scripts/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/autojs-kill-scripts/</guid>
      <description>Auto.JS介绍  Auto.js Pro是什么 一个在Android、鸿蒙平台编写、运行JavaScript代码的集成开发环境，包括代码补全的编辑器、单步调试、图形化设计，可构建为独立apk应用，也可连接电脑开发。
Auto.js Pro能做什么 创建自动化工具、效率工具、优美界面、小应用，诸如早晨自动签到、处理文件为excel、图片批量处理、机器人、自动化测试、搭建服务器等，或解放双手，或学习编程，或制作应用。
为什么选择Auto.js Pro 完善的文档和示例、丰富的API、增强的加密、活跃的更新，用JavaScript连接Java、Android、Node.js的生态。
 注：Auto.JS与Auto.JS Pro的区别在于，前者是免费、开源的，但是已经停更多年，后者需要付费，但仍在持续更新，提供更多的功能。Auto.js 开源版本已不再维护(原因参见Auto.js Pro FAQ)，后续将只维护Auto.js Pro专业版。
官网链接 Auto.JS
Auto.JS Pro
杀死APP具体实现 实现原理  调用engines.all()方法获取当前正在运行的所有引擎对象（返回对象数组） 再调用engines.myEngine()方法获取当前正在前台运行这个方法的对象（返回单个对象） 进行对象比对后再调用engine.forceStop()方法杀死非当前引擎对象 该方法能避免用户反复运行脚本，导致脚本互相干扰、资源占用等情况  完整代码 function kill_scripts() { allNgs = engines.all() myNg = engines.myEngine() for (var i = 0; i &amp;lt; allNgs.length; ++i) { if (!(allNgs[i] === myNg)) { allNgs[i].forceStop() } } } kill_scripts() </description>
    </item>
    
    <item>
      <title>Auto.JS中免Root杀死APP的巧妙方法</title>
      <link>https://yanbo92.github.io/autojs-kill-app/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/autojs-kill-app/</guid>
      <description>Auto.JS介绍  Auto.js Pro是什么 一个在Android、鸿蒙平台编写、运行JavaScript代码的集成开发环境，包括代码补全的编辑器、单步调试、图形化设计，可构建为独立apk应用，也可连接电脑开发。
Auto.js Pro能做什么 创建自动化工具、效率工具、优美界面、小应用，诸如早晨自动签到、处理文件为excel、图片批量处理、机器人、自动化测试、搭建服务器等，或解放双手，或学习编程，或制作应用。
为什么选择Auto.js Pro 完善的文档和示例、丰富的API、增强的加密、活跃的更新，用JavaScript连接Java、Android、Node.js的生态。
 注：Auto.JS与Auto.JS Pro的区别在于，前者是免费、开源的，但是已经停更多年，后者需要付费，但仍在持续更新，提供更多的功能。Auto.js 开源版本已不再维护(原因参见Auto.js Pro FAQ)，后续将只维护Auto.js Pro专业版。
官网链接 Auto.JS
Auto.JS Pro
杀死APP具体实现 实现原理  调用openAppSetting(packageName)方法打开系统设置中对应APP的设置页 通过控件操作点击强制停止，确认等按钮，达到杀死APP的目的 该方法巧妙的规避了通过adb shell kill或者 adb shell am force-stop方法带来的权限问题  完整代码 function kill_app(packageName) { var name = getPackageName(packageName); if (!name) { if (getAppName(packageName)) { name = packageName; } else { return false; } } app.openAppSetting(name); text(app.getAppName(name)).waitFor(); let is_sure = textMatches(/(.*强.*|.*停.*|.*结.*|.*行.*)/).findOne(); if (is_sure.enabled()) { textMatches(/(.*强.*|.*停.*|.*结.*|.*行.*)/).findOne().click(); textMatches(/(.*确.*|.*定.*)/).findOne().click(); log(app.</description>
    </item>
    
    <item>
      <title>通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机</title>
      <link>https://yanbo92.github.io/jenkins-extended-choice-parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/jenkins-extended-choice-parameter/</guid>
      <description>背景 在自动化测试的交付、执行过程中，很难绕开当下大热的CI/CD工具Jenkins。而Jenkins中原生的参数类型比较单一，难以实现动态化。为了交付一些UI自动化脚本，测试工程师需要先选择执行手机、执行版本等等内容，其中选择执行手机这一步骤如果只用文本参数来实现，用户的使用场景类似这样：
  开命令行，执行adb device 或者idevice_id -l 将手机id粘贴到Jenkins执行参数中，运行   本文提供一种一步到位的选择参数实现。
工具介绍 Jenkins  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。
 Extended-Choice-Parameter  Extended-Choice-Parameter是一款Jenkins插件，主要功能为对选择参数进行扩展，用于实现多选参数、实现选项动态获取等更强大的功能
 Groovy  Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy也可以使用其他非Java语言编写的库。
 实现原理  Jenkins有许多插件支持动态参数列表，比如Extended-Choice-Parameter，又比如Active Choice，综合试用了一下选择了前者。 把查询手机id的命令，也就是adb devices或者idevice_id -l写成Groovy脚本传入Extended-Choice-Parameter的Value里  具体实现代码 Android 如果你的手机都插在主节点master上，可以用以下代码，填入Choose Source for Value - Groovy Script
String content = &amp;#34;adb devices&amp;#34;.execute().text String[] str; str = content.split(&amp;#39;\n&amp;#39;); def result = []; for( String values : str ){ if(values.contains(&amp;#34;\tdevice&amp;#34;)){ result.add(values.replaceAll(&amp;#34;\tdevice&amp;#34;,&amp;#34;&amp;#34;)) } } result 但如果你的主节点和执行节点并不是同一个，需要在执行节点上去做动态获取，那么代码是这样的</description>
    </item>
    
    <item>
      <title>通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机(二)</title>
      <link>https://yanbo92.github.io/jenkins-extended-choice-parameter-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/jenkins-extended-choice-parameter-2/</guid>
      <description>背景 在通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机)中，介绍了如何简单的把手机选择参数做成实时显示当前连接的设备列表，但实际使用下来，发现有以下两个小问题
 列表只能显示手机的id，可读性极差，仍然难以避免另外去查询手机名字以对应上id iOS列表基于idevice_id实现，其底层连接依赖USB，也就是说无法做到识别无线设备  基于以上考虑，进行一次细节优化
工具介绍 tidevice  该工具能够用于与iOS设备进行通信, 提供以下功能
 截图 获取手机信息 ipa包的安装和卸载 根据bundleID 启动和停止应用 列出安装应用信息 模拟Xcode运行XCTest，常用的如启动WebDriverAgent测试（此方法不依赖xcodebuild) 获取指定应用性能(CPU,MEM,FPS) 文件操作 其他  支持运行在Mac，Linux，Windows上
安装：
pip3 install -U &amp;#34;tidevice[openssl]&amp;#34;  实现原理  Jenkins有许多插件支持动态参数列表，比如Extended-Choice-Parameter，又比如Active Choice，综合试用了一下选择了前者。 （一）文中只在参数的Value中编写了Groovy脚本动态获取手机id列表，而Value Description也可以通过Groovy来获取手机的名字，直接显示具体的型号 把查询手机名称的命令，也就是adb devices -l或者tidevice list写成Groovy脚本传入Extended-Choice-Parameter的Value Description里  具体实现代码 Android 如果你的手机都插在主节点master上，可以用以下代码，填入Choose Source for Value Description - Groovy Script
String content = &amp;#34;adb devices -l&amp;#34;.execute().text String[] str; str = content.split(&amp;#39;\n&amp;#39;); def result = []; for( String values : str ){ if(values.</description>
    </item>
    
  </channel>
</rss>
