<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on yanbo92.site</title><link>https://yanbo92.site/tags/python/</link><description>Recent content in python on yanbo92.site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 15 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yanbo92.site/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>使用Coverage.py统计uWSGI+Flask程序的代码覆盖率</title><link>https://yanbo92.site/uwsgi-flask-coverage/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><guid>https://yanbo92.site/uwsgi-flask-coverage/</guid><description>&lt;img src="https://yanbo92.site/uwsgi-flask-coverage/cover.png" alt="Featured image of post 使用Coverage.py统计uWSGI+Flask程序的代码覆盖率" />&lt;blockquote>
&lt;p>&lt;code>Coverage.py&lt;/code>是一款常用的&lt;code>Python&lt;/code>程序的覆盖率统计工具，他的基础用法为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">coverage run main.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但生产环境中的&lt;code>Python&lt;/code>程序很多都不会直接运行&lt;code>python&lt;/code>文件，而是通过&lt;code>uWSGI&lt;/code>等技术实现服务托管，需要使用&lt;code>uWSGI&lt;/code>的配置文件启动。这样就无法直接使用&lt;code>coverage run&lt;/code>了，本文提供一种通过改造&lt;code>Flask&lt;/code>入口文件来实现&lt;code>uWSGI + Flask&lt;/code>代码覆盖率采集的方式。&lt;/p>
&lt;/blockquote>
&lt;h2 id="实现原理">实现原理&lt;/h2>
&lt;p>&lt;code>Coverage.py&lt;/code>的用法主要有两种，分别为&lt;/p>
&lt;ul>
&lt;li>
&lt;p>命令行调用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API调用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>其中API调用的方式需要修改待测程序的源码，较少用到，但是在当前案例中是可行的选择。&lt;/p>
&lt;p>&lt;code>Coverage.py&lt;/code>提供了&lt;code>Coverage&lt;/code>类，以及成员方法&lt;code>start&lt;/code>, &lt;code>stop&lt;/code>等，理论上我们只需要在&lt;code>Flask&lt;/code>启动前以及停止后插入对应的代码即可。启动前，可以直接写，而停止后则需要用特定的信号捕获来实现了，本文使用&lt;code>atexit&lt;/code>&lt;/p>
&lt;h2 id="demo准备">demo准备&lt;/h2>
&lt;ul>
&lt;li>安装 &lt;code>uWSGI&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">brew install uwsgi &lt;span class="c1"># mac或者linuxbrew用户适用&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装 &lt;code>coverage&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pip install coverage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Flsak&lt;/code>代码&lt;code>run.py&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">flask&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Flask&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Flask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">index&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/hello&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;hello&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;0.0.0.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>uWSGI&lt;/code>配置文件&lt;code>run.ini&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[uwsgi]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">http&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">0.0.0.0:5001&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">chdir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/Developer/PycharmProjects/flask-demo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">wsgi-file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">run.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">callable&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">app&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">processes&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">threads&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>运行一下试试&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">yanbo92@yanbo92mbp13 flask-demo % uwsgi --ini run.ini
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[uWSGI] getting INI configuration from run.ini
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Starting uWSGI 2.0.20 (64bit) on [Wed Jun 15 23:00:00 2022] ***
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">compiled with version: Apple LLVM 13.1.6 (clang-1316.0.21.2.3) on 15 June 2022 12:01:01
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">os: Darwin-21.2.0 Darwin Kernel Version 21.2.0: Sun Nov 28 20:28:54 PST 2021; root:xnu-8019.61.5~1/RELEASE_X86_64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nodename: yanbo92mbp13.lan
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">machine: x86_64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clock source: unix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">detected number of CPU cores: 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">current working directory: /Developer/PycharmProjects/flask-demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">detected binary path: /Library/Frameworks/Python.framework/Versions/3.9/bin/uwsgi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">!!! no internal routing support, rebuild with pcre support !!!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chdir() to /Developer/PycharmProjects/flask-demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** WARNING: you are running uWSGI without its master process manager ***
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">your processes number limit is 1392
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">your memory page size is 4096 bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">detected max file descriptor number: 10240
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lock engine: OSX spinlocks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thunder lock: disabled (you can enable it with --thunder-lock)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uWSGI http bound on 0.0.0.0:5001 fd 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spawned uWSGI http 1 (pid: 29244)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uwsgi socket 0 bound to TCP address 127.0.0.1:63603 (port auto-assigned) fd 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Python version: 3.9.12 (v3.9.12:b28265d7e6, Mar 23 2022, 18:17:11) [Clang 6.0 (clang-600.0.57)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Python main interpreter initialized at 0x7fde17104aa0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python threads support enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">your server socket listen backlog is limited to 100 connections
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">your mercy for graceful operations on workers is 60 seconds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mapped 333312 bytes (325 KB) for 8 cores
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Operational MODE: preforking+threaded ***
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WSGI app 0 (mountpoint=&amp;#39;&amp;#39;) ready in 1 seconds on interpreter 0x7fde17104aa0 pid: 29243 (default app)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** uWSGI is running in multiple interpreter mode ***
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spawned uWSGI worker 1 (pid: 29243, cores: 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spawned uWSGI worker 2 (pid: 29247, cores: 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spawned uWSGI worker 3 (pid: 29248, cores: 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spawned uWSGI worker 4 (pid: 29249, cores: 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="coverage代码插入">Coverage代码插入&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">collect_coverage&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 捕获中断信号之后执行的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cov stop&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cov&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cov&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">combine&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cov&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">xml_report&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outfile&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;report.xml&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cov&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">html_report&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">directory&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;report&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注册到atexit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">atexit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">register&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">collect_coverage&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Flask启动之前开始采集&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cov start&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cov&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Coverage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cov&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;0.0.0.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="简单验证一下">简单验证一下&lt;/h2>
&lt;ul>
&lt;li>重新运行&lt;code>uWSGI&lt;/code>，可见输出中包含&lt;code>cov start&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mapped 333312 bytes (325 KB) for 8 cores
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Operational MODE: preforking+threaded ***
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cov start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WSGI app 0 (mountpoint=&amp;#39;&amp;#39;) ready in 0 seconds on interpreter 0x7f85e5904750 pid: 30690 (default app)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** uWSGI is running in multiple interpreter mode ***
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spawned uWSGI worker 1 (pid: 30690, cores: 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>调用一个接口，模拟测试过程&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">yanbo92@yanbo92mbp13 flask-demo % curl 0.0.0.0:5001/hello
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hello%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Ctrl + C&lt;/code>结束程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[pid: 31325|app: 0|req: 1/1] 127.0.0.1 () {28 vars in 305 bytes} [Wed Jun 15 23:10:45 2022] GET /hello =&amp;gt; generated 5 bytes in 7 msecs (HTTP/1.1 200) 2 headers in 78 bytes (1 switches on core 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^Ccov stop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cov stop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cov stop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cov stop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>检查当前目录，已产出报告&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">yanbo92@yanbo92mbp13 flask-demo % ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">report report.xml run.ini run.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="相关文章">相关文章&lt;/h2>
&lt;p>&lt;a class="link" href="https://segmentfault.com/a/1190000003806169" target="_blank" rel="noopener"
>使用Coverage分析WSGI项目的代码覆盖率&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/daryl-blog/p/11369563.html" target="_blank" rel="noopener"
>uwsgi flask gevent 测试代码覆盖率（coverage）&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://coverage.readthedocs.io/en/latest/api_coverage.html" target="_blank" rel="noopener"
>coverage api&lt;/a>&lt;/p></description></item><item><title>使用crash2json库将iOS崩溃日志解析成json文件</title><link>https://yanbo92.site/crash2json/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/crash2json/</guid><description>&lt;img src="https://yanbo92.site/crash2json/cover.png" alt="Featured image of post 使用crash2json库将iOS崩溃日志解析成json文件" />&lt;h2 id="项目背景">项目背景&lt;/h2>
&lt;ul>
&lt;li>为了对iOS崩溃日志进行进一步的分析，需要将崩溃日志中的信息拆分成不同的部分，取其中的一部分或者多个部分进行存储、对比，于是我写了一个python库将&lt;code>.crash&lt;/code>文件转换成&lt;code>.json&lt;/code>文件。&lt;/li>
&lt;li>鉴于Apple在iOS15上已经将崩溃文件存储成类似json的格式，本库仅在iOS15以下的版本发挥作用。&lt;/li>
&lt;/ul>
&lt;h2 id="操作步骤">操作步骤&lt;/h2>
&lt;h3 id="安装crash2json">安装crash2json&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pip install crash2json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="命令行直接运行">命令行直接运行&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">crash2json yourcrashreport.crash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他参数">其他参数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">positional arguments:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> crash_file&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>optional arguments:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> -h, --help show this &lt;span class="nb">help&lt;/span> message and exit&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --binary_image_list_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse binary_image_list to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --crashed_thread_state_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse crashed_thread_state to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --diagnostic_messages_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse diagnostic_messages to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --exception_backtrace_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse exception_backtrace to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --exception_information_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse exception_information to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --header_only parse header to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --other_threads_backtrace_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse other_threads_backtrace to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --thread0_backtrace_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse thread0_backtrace to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> -s, --simple output a simple json with only header, exceptionInfo, diagnositcMsg, Thread0Backtrace&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> -o OUTPUT_NAME, --output_name OUTPUT_NAME&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> the .json file you want to save result to, no need .json suffix&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="源码地址">源码地址&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/yanbo92/crash2json" target="_blank" rel="noopener"
>yanbo92/crash2json&lt;/a>&lt;/p></description></item><item><title>通过ifuse/tidevice库读写iPhone手机硬盘</title><link>https://yanbo92.site/read-write-iphone-disk/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/read-write-iphone-disk/</guid><description>&lt;img src="https://yanbo92.site/read-write-iphone-disk/cover.png" alt="Featured image of post 通过ifuse/tidevice库读写iPhone手机硬盘" />&lt;h2 id="背景">背景&lt;/h2>
&lt;p>在自动化测试的交付、执行过程中，偶尔需要对iPhone手机的硬盘进行读写操作，比如删除相册，拷贝素材等等。本文介绍两个通过命令行操作iPhone手机硬盘的工具，分别是&lt;code>ifuse&lt;/code>和&lt;code>tidevice&lt;/code>。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="工具介绍">工具介绍&lt;/h2>
&lt;h4 id="macfuse">MacFuse&lt;/h4>
&lt;blockquote>
&lt;h2 id="what-is-macfuse">What is macFUSE?&lt;/h2>
&lt;p>macFUSE allows you to extend macOS&amp;rsquo;s native file handling capabilities via third-party file systems.&lt;/p>
&lt;p>macFUSE允许你通过第三方文件系统扩展macOS的本地文件处理能力。&lt;/p>
&lt;h3 id="features">Features&lt;/h3>
&lt;p>As a user, installing the macFUSE software package will let you use any third-party FUSE file system. Legacy MacFUSE file systems are supported through the optional MacFUSE compatibility layer.&lt;/p>
&lt;p>As a developer, you can use the FUSE SDK to write numerous types of new file systems as regular user space programs. The content of these file systems can come from anywhere: from the local disk, from across the network, from memory, or any other combination of sources. Writing a file system using FUSE is orders of magnitude easier and quicker than the traditional approach of writing in-kernel file systems. Since FUSE file systems are regular applications (as opposed to kernel extensions), you have just as much flexibility and choice in programming tools, debuggers, and libraries as you have if you were developing standard macOS applications.&lt;/p>
&lt;p>作为一个用户，安装macFUSE软件包可以让你使用任何第三方FUSE文件系统。传统的MacFUSE文件系统通过可选的MacFUSE兼容层得到支持。&lt;/p>
&lt;p>作为开发者，你可以使用 FUSE SDK 来编写众多类型的新文件系统，作为常规的用户空间程序。这些文件系统的内容可以来自任何地方：来自本地磁盘，来自整个网络，来自内存，或任何其他来源的组合。使用FUSE编写文件系统比编写内核内文件系统的传统方法要容易得多，也快得多。由于 FUSE 文件系统是普通的应用程序（而不是内核扩展），你在编程工具、调试器和库方面的灵活性和选择与开发标准的 macOS 应用程序一样多。&lt;/p>
&lt;p>项目主页：&lt;a class="link" href="https://osxfuse.github.io/" target="_blank" rel="noopener"
>osxfuse.github.io&lt;/a>&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install osxfuse --cask
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h4 id="ifuse">ifuse&lt;/h4>
&lt;blockquote>
&lt;p>&lt;em>A fuse filesystem implementation to access the contents of iOS devices.&lt;/em>&lt;/p>
&lt;p>一个Fuse文件系统的实现，用于访问iOS设备的内容。&lt;/p>
&lt;h2 id="features-1">Features&lt;/h2>
&lt;p>This project allows mounting various directories of an iOS device locally using the &lt;a class="link" href="https://github.com/libfuse/libfuse" target="_blank" rel="noopener"
>FUSE file system interface&lt;/a>.&lt;/p>
&lt;p>这个项目允许使用[FUSE文件系统接口]在本地挂载iOS设备的各种目录。&lt;/p>
&lt;p>Some key features are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Media&lt;/strong>: Mount media directory of an iOS device locally&lt;/li>
&lt;li>&lt;strong>Apps&lt;/strong>: Mount sandbox container or document directory of an app&lt;/li>
&lt;li>&lt;strong>Jailbreak&lt;/strong>: Mount root filesystem on jailbroken devices &lt;em>(requires AFC2 service)&lt;/em>&lt;/li>
&lt;li>&lt;strong>Browse&lt;/strong>: Allows to retrieve a list of installed file-sharing enabled apps&lt;/li>
&lt;li>&lt;strong>Implementation&lt;/strong>: Uses &lt;a class="link" href="https://github.com/libimobiledevice/libimobiledevice" target="_blank" rel="noopener"
>libimobiledevice&lt;/a> for communication with the device&lt;/li>
&lt;/ul>
&lt;p>主要特性如下&lt;/p>
&lt;ul>
&lt;li>&lt;strong>媒体&lt;/strong>。在本地安装iOS设备的媒体目录&lt;/li>
&lt;li>&lt;strong>Apps&lt;/strong>。挂载一个应用程序的沙盒容器或文档目录。&lt;/li>
&lt;li>&lt;strong>越狱&lt;/strong>。在已越狱的设备上挂载根文件系统 &lt;em>（需要AFC2服务）&lt;/em>。&lt;/li>
&lt;li>&lt;strong>浏览&lt;/strong>。允许检索已安装的支持文件共享的应用程序的列表&lt;/li>
&lt;li>&lt;strong>实施&lt;/strong>。使用[libimobiledevice]与设备进行通信&lt;/li>
&lt;/ul>
&lt;p>项目主页：&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install ifuse
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果装不上，把系统时间改到2021年4月6日之前即可。但时间改了之后又会出现443:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">curl: (35) LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to ghcr.io:443
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以正确的操作流程是要在通过了brew校验这个包可以装之后再改回正常的时间，以通过下载包所需要的SSL校验，毫秒级操作，不过多试几次就能装上去。&lt;/p>
&lt;p>此项目依赖osxfuse，请先安装上面的osxfuse。&lt;/p>
&lt;/blockquote>
&lt;h4 id="tidevice">tidevice&lt;/h4>
&lt;blockquote>
&lt;p>该工具能够用于与iOS设备进行通信, 提供以下功能&lt;/p>
&lt;ul>
&lt;li>截图&lt;/li>
&lt;li>获取手机信息&lt;/li>
&lt;li>ipa包的安装和卸载&lt;/li>
&lt;li>根据bundleID 启动和停止应用&lt;/li>
&lt;li>列出安装应用信息&lt;/li>
&lt;li>模拟Xcode运行XCTest，常用的如启动WebDriverAgent测试（此方法不依赖xcodebuild)&lt;/li>
&lt;li>获取指定应用性能(CPU,MEM,FPS)&lt;/li>
&lt;li>文件操作&lt;/li>
&lt;li>其他&lt;/li>
&lt;/ul>
&lt;p>支持运行在Mac，Linux，Windows上&lt;/p>
&lt;p>项目主页：&lt;a class="link" href="https://github.com/alibaba/taobao-iphone-device" target="_blank" rel="noopener"
>alibaba/taobao-iphone-device&lt;/a>&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pip3 install -U &lt;span class="s2">&amp;#34;tidevice[openssl]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h2 id="实现原理">实现原理&lt;/h2>
&lt;ul>
&lt;li>通过阅读源码可以得知，&lt;code>ifuse&lt;/code>依赖&lt;code>libimobiledevice&lt;/code>，同时是基于&lt;code>usbmux&lt;/code>实现的，换言之，该库只支持通过电脑usb连接手机来通信。ifuse将手机硬盘的某一部分挂载到电脑硬盘上，再通过正常的文件读写操作去控制。&lt;/li>
&lt;li>而&lt;code>tidevice&lt;/code>则是把&lt;code>instruments&lt;/code>协议整个用python实现了一遍，这是支持&lt;strong>无线&lt;/strong>连接手机的。并且开发者将常用文件操作封装了一层，支持&lt;code> rm cat pull push stat tree rmtree mkdir ls&lt;/code> 等操作，有点adb的味道。&lt;/li>
&lt;/ul>
&lt;h2 id="具体实现代码">具体实现代码&lt;/h2>
&lt;h4 id="ifuse读写手机内存">ifuse读写手机内存&lt;/h4>
&lt;p>首先新建一个mount_point目录用于挂载手机硬盘：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mkdir mount_point
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后用默认参数挂载，这样将会挂载整个&lt;code>Media&lt;/code>目录，可以拿到&lt;code>DCIM&lt;/code>以及&lt;code>Downloads&lt;/code>之类的目录内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % ifuse -u c6b0ab4fa8867c51cf1c5b6d8cd076d3957192b2 mount_point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % ls mount_point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AirFair MediaAnalysis Purchases afk&lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>.zip rd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Books PhotoData Radio afk_screenshots
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DCIM Photos Recordings general_storage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Downloads PublicStaging afk iTunes_Control
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以像自己电脑上的目录一样去读写，比如&lt;code>rm&lt;/code>，&lt;code>mkdir&lt;/code>之类的都没问题。&lt;/p>
&lt;p>卸载掉：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">umount mount_point
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有另一种更强力的卸载，毕竟这个库经常会卸载不掉：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">diskutil unmount force mount_point
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再试试指定APP包名的挂载方式，此处用的是Alook浏览器&lt;code>com.ld.TakeBrowser&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % ifuse --documents com.ld.TakeBrowser -u c6b0ab4fa8867c51cf1c5b6d8cd076d3957192b2 mount_point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % ls mount_point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Audios Images Videos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Documents Others Zipped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里挂载了APP的Documents目录，同样可以使用的参数还有&lt;code>--container&lt;/code>&lt;/p>
&lt;h4 id="tidevice读写手机内存">tidevice读写手机内存&lt;/h4>
&lt;p>首先新建一个txt用于调试&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">touch file.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似的，查看&lt;code>Media&lt;/code>下的目录：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % tidevice fsync ls /DCIM/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[&amp;#39;.DS_Store&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;104APPLE&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;._.DS_Store&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;103APPLE&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;102APPLE&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;.MISC&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;101APPLE&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;100APPLE&amp;#39;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除一张照片：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % tidevice fsync rm /DCIM/104APPLE/IMG_4334.JPG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;AFCStatus.SUCCESS: 0&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>操作特定的APP目录，需要使用&lt;code>-B&lt;/code>参数：&lt;/p>
&lt;p>ls操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % tidevice fsync -B com.ld.TakeBrowser ls /Documents
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[&amp;#39;Zipped&amp;#39;, &amp;#39;Documents&amp;#39;, &amp;#39;Videos&amp;#39;, &amp;#39;Others&amp;#39;, &amp;#39;Images&amp;#39;, &amp;#39;Audios&amp;#39;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>push操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % tidevice fsync -B com.ld.TakeBrowser push file.txt /Documents/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pushed to /Documents/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似的支持的操作还有如下几个：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{rm,cat,pull,stat,tree,rmtree,mkdir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用建议">使用建议&lt;/h4>
&lt;p>个人认为在功能没有差异的情况下，使用&lt;code>tidevice&lt;/code>要比&lt;code>ifuse&lt;/code>方便得多，有如下原因&lt;/p>
&lt;ul>
&lt;li>基于Python实现，相对于ifuse使用C的实现更适合脚本集成，可以直接用python的&lt;code>import&lt;/code>使用，无需使用类似&lt;code>os.system()&lt;/code>这种粗暴的方式&lt;/li>
&lt;li>&lt;code>tidevice&lt;/code>无需挂载到本机，实际使用起来&lt;code>ifuse&lt;/code>经常出现某个目录卸载失败，需要重启电脑这样的情况，会出现&lt;code>Input/Output Error&lt;/code>，也就是规避掉了关闭通道异常这种风险&lt;/li>
&lt;li>&lt;code>tidevice&lt;/code>基于&lt;code>instruments&lt;/code>实现，支持无线连接手机，当你的测试手机USB口被占用时，&lt;code>tidevice&lt;/code>是唯一的选择。&lt;/li>
&lt;/ul></description></item></channel></rss>