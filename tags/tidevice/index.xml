<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tidevice on yanbo92.site</title><link>https://yanbo92.site/tags/tidevice/</link><description>Recent content in tidevice on yanbo92.site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 06 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yanbo92.site/tags/tidevice/index.xml" rel="self" type="application/rss+xml"/><item><title>腾讯性能狗收费之后，我写了一款iOS性能测试工具</title><link>https://yanbo92.site/ios-perf/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://yanbo92.site/ios-perf/</guid><description>&lt;img src="https://yanbo92.site/ios-perf/iOS-perf-1.png" alt="Featured image of post 腾讯性能狗收费之后，我写了一款iOS性能测试工具" />&lt;h2 id="运行效果">运行效果&lt;/h2>
&lt;p>&lt;img src="https://yanbo92.site/ios-perf/iOS-perf-1.png"
width="3426"
height="1990"
srcset="https://yanbo92.site/ios-perf/iOS-perf-1_huf985558f52f94ae7d6333bd201a6f5cc_710078_480x0_resize_box_3.png 480w, https://yanbo92.site/ios-perf/iOS-perf-1_huf985558f52f94ae7d6333bd201a6f5cc_710078_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ios-perf"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;h2 id="项目介绍">项目介绍&lt;/h2>
&lt;p>项目地址：&lt;a class="link" href="https://github.com/yanbo92/iOS-perf" target="_blank" rel="noopener"
>yanbo92/iOS-perf&lt;/a>&lt;/p>
&lt;p>性能测试一直是APP测试的一个重要部分，而在&lt;code>Android&lt;/code>上由于系统的开放特性，相关工具支持比较多，比如&lt;code>solopi&lt;/code>等。但在&lt;code>iOS&lt;/code>上，腾讯家的&lt;code>perfdog&lt;/code>本来还是十分好用的，但收费了就有点难受，而直接用&lt;code>Xcode&lt;/code>的&lt;code>Instruments&lt;/code>又对Mac有刚需，很难支撑公司的测试需求。此时看到&lt;a class="link" href="http://testerhome.com/topics/31066" target="_blank" rel="noopener"
>这个贴子&lt;/a>，上手跑了几次，还挺好用的，于是就顺着思路做了下去，有了这个比较完善的项目。&lt;/p>
&lt;p>当前支持获取的性能数据包括GPU、CPU、内存、FPS、功耗、网络、温度，以及一系列手机硬件数据，并将根据需求继续新增。&lt;/p>
&lt;p>本项目基于jlintxia开源的iOS测试方案修改而来，增加动态建表，动态增加grafana面板以及docker打包环境等特性。其中iOS性能数据来源于开源工具tidevice和py-ios-device。&lt;/p>
&lt;p>注意：本项目依赖MySQL进行性能数据存储，Grafana进行数据动态展示，也就是说需要在本机或者可达的网络（比如公司局域网） 上搭建MySQL+Grafana服务，我提供了一份docker-compose.yml文件，可以使用docker快速搭建一套环境。&lt;/p>
&lt;h2 id="相关工具">相关工具&lt;/h2>
&lt;h3 id="grafana">Grafana&lt;/h3>
&lt;p>&lt;a class="link" href="https://grafana.com/" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Grafana是一个跨平台、开源的数据可视化网络应用程序平台。用户配置连接的数据源之后，Grafana可以在网络浏览器里显示数据图表和警告。该软件的企业版本提供更多的扩展功能。扩展功能通过插件的形式提供，终端用户可以自定义自己的数据面板界面以及数据请求方式。&lt;/p>
&lt;/blockquote>
&lt;h3 id="mysql">MySQL&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.mysql.com/cn/" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>MySQL原本是一个开放源码的关系数据库管理系统，原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统收购。2009年，甲骨文公司收购昇阳微系统公司，MySQL成为Oracle旗下产品。&lt;/p>
&lt;/blockquote>
&lt;h3 id="py-ios-device">py-ios-device&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/YueChen-C/py-ios-device" target="_blank" rel="noopener"
>项目地址&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>win，mac 跨平台方案，通过 Instruments 私有协议获取 iOS 相关性能指标数据。&lt;/p>
&lt;p>相关文章链接:https://testerhome.com/topics/27159&lt;/p>
&lt;/blockquote>
&lt;h3 id="tidevice">tidevice&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/alibaba/taobao-iphone-device" target="_blank" rel="noopener"
>项目地址&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>tidevice 是阿里的内部的一个小组用来做 iOS 自动化用的工具，通过逆向iOS通信协议，使用纯Python实现。目前淘宝和其他部分事业部已经全面使用了该技术，进行iOS应用的性能采集，UI自动化。&lt;/p>
&lt;p>注：这里的被测应用无需做任何修改，使用不再局限于Mac上。&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用步骤">使用步骤&lt;/h2>
&lt;h3 id="准备工作">准备工作&lt;/h3>
&lt;p>服务端搭建依赖docker以及docker-compose，安装指南：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://dockerdocs.cn/get-docker/" target="_blank" rel="noopener"
>https://dockerdocs.cn/get-docker/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://dockerdocs.cn/get-started/08_using_compose/" target="_blank" rel="noopener"
>https://dockerdocs.cn/get-started/08_using_compose/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>运行测试依赖python3环境，安装指南：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://www.python.org/downloads/" target="_blank" rel="noopener"
>https://www.python.org/downloads/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="服务端搭建">服务端搭建&lt;/h4>
&lt;p>命令行运行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">docker -v &amp;amp;&amp;amp; docker-compose -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果能正常输出版本，如下，则表示docker环境正常，可以继续&lt;/p>
&lt;blockquote>
&lt;p>Docker version 20.10.8, build 3967b7d&lt;/p>
&lt;p>docker-compose version 1.29.2, build 5becea4c&lt;/p>
&lt;/blockquote>
&lt;p>拉取镜像并启动服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：初次打开&lt;code>Grafana&lt;/code>时，系统会提示你修改密码，为了方便建议不修改，即保持账号密码均为&lt;code>admin&lt;/code>，否则在python运行指令中将要进行对应的传参。&lt;/strong>&lt;/p>
&lt;h4 id="本地环境搭建">本地环境搭建&lt;/h4>
&lt;p>命令行执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="运行命令">运行命令&lt;/h3>
&lt;p>命令行执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python run.py --udid&lt;span class="o">=&lt;/span>00008110-001A4D483CF2801E &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--bundleid&lt;span class="o">=&lt;/span>com.apple.Preferences &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--grafana_host&lt;span class="o">=&lt;/span>localhost &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--grafana_port&lt;span class="o">=&lt;/span>&lt;span class="m">30000&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--grafana_user&lt;span class="o">=&lt;/span>admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--grafana_password&lt;span class="o">=&lt;/span>admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_host&lt;span class="o">=&lt;/span>localhost &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_port&lt;span class="o">=&lt;/span>&lt;span class="m">33306&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_username&lt;span class="o">=&lt;/span>root &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_password&lt;span class="o">=&lt;/span>admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_db&lt;span class="o">=&lt;/span>iOSPerformance
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="运行参数说明">运行参数说明&lt;/h4>
&lt;h5 id="建议修改参数">建议修改参数&lt;/h5>
&lt;blockquote>
&lt;ul>
&lt;li>&amp;ndash;bundleid：待测APP的包名，通过&lt;code>ideviceinstaller -l&lt;/code>获取，默认值为&lt;code>com.apple.Preferences&lt;/code>&lt;/li>
&lt;li>&amp;ndash;udid iPhone：手机的唯一标识符，通过 &lt;code>idevice_id -l&lt;/code> 获取，客户端只连接一台手机时不用写&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h5 id="grafana可选参数">Grafana可选参数&lt;/h5>
&lt;blockquote>
&lt;ul>
&lt;li>&amp;ndash;grafana_host：Grafana的主机地址，只写ip，不用写Scheme，也就是&lt;code>http://&lt;/code>或者&lt;code>https//&lt;/code>，默认值localhost&lt;/li>
&lt;li>&amp;ndash;grafana_port：Grafana的端口号，默认值30000&lt;/li>
&lt;li>&amp;ndash;grafana_user：Grafana的用户名，默认值admin&lt;/li>
&lt;li>&amp;ndash;grafana_password：Grafana的密码，默认值admin&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h5 id="mysql可选参数">MySQL可选参数&lt;/h5>
&lt;blockquote>
&lt;ul>
&lt;li>&amp;ndash;mysql_host：MySQL的主机地址，不用写Scheme，也就是&lt;code>http://&lt;/code>或者&lt;code>https//&lt;/code>，默认值localhost&lt;/li>
&lt;li>&amp;ndash;mysql_port：MySQL的端口号，默认值33306&lt;/li>
&lt;li>&amp;ndash;mysql_user：MySQL的用户名，默认值root&lt;/li>
&lt;li>&amp;ndash;mysql_password：MySQL的用户名，默认值admin&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="数据导出">数据导出&lt;/h3>
&lt;p>命令行执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python mysql.py --runid&lt;span class="o">=&lt;/span>iphone6_1008_1532 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_host&lt;span class="o">=&lt;/span>localhost &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_port&lt;span class="o">=&lt;/span>&lt;span class="m">33306&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_username&lt;span class="o">=&lt;/span>root &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_password&lt;span class="o">=&lt;/span>admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_db&lt;span class="o">=&lt;/span>iOSPerformance
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中，&lt;code>--runid&lt;/code>为必须参数，可以从显示测试数据的Grafana页面的左上角找到，通常为手机名称+月日+时分。其余Mysql参数均为可选参数，默认值与上方&lt;a class="link" href="#MySQL%e5%8f%af%e9%80%89%e5%8f%82%e6%95%b0" >MySQL可选参数&lt;/a>相同。&lt;/p>
&lt;h2 id="心得">心得&lt;/h2>
&lt;p>Docker起服务实在是太方便了，grafana做可视化也很香。也很感慨现在测试开发方面的开源环境发展起来了，有很多现成的代码可以参考。&lt;/p>
&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>&lt;a class="link" href="https://perfdog.qq.com/" target="_blank" rel="noopener"
>PerfDog | 移动全平台性能测试分析专家&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://testerhome.com/topics/27159" target="_blank" rel="noopener"
>硬货来啦！！使用纯 python 实现 Instruments 协议，跨平台 (win,mac,linux) 获取 iOS 性能数据 · TesterHome&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://tech.taobao.org/news/lxhg5l" target="_blank" rel="noopener"
>新工具开源！一款iOS自动化利器（附地址）&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://testerhome.com/topics/31066" target="_blank" rel="noopener"
>实时可视化 iOS 性能数据 tidevice+pyiosdevice+mysql+grafana · TesterHome&lt;/a>&lt;/p></description></item><item><title>通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机(二)</title><link>https://yanbo92.site/jenkins-extended-choice-parameter-2/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/jenkins-extended-choice-parameter-2/</guid><description>&lt;img src="https://yanbo92.site/jenkins-extended-choice-parameter-2/cover.png" alt="Featured image of post 通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机(二)" />&lt;h2 id="背景">背景&lt;/h2>
&lt;p>在&lt;a class="link" href="https://yanbo92.site/jenkins-extended-choice-parameter/" target="_blank" rel="noopener"
>通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机)&lt;/a>中，介绍了如何简单的把手机选择参数做成实时显示当前连接的设备列表，但实际使用下来，发现有以下两个小问题&lt;/p>
&lt;ul>
&lt;li>列表只能显示手机的id，可读性极差，仍然难以避免另外去查询手机名字以对应上id&lt;/li>
&lt;li>iOS列表基于idevice_id实现，其底层连接依赖USB，也就是说无法做到识别无线设备&lt;/li>
&lt;/ul>
&lt;p>基于以上考虑，进行一次细节优化&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="工具介绍">工具介绍&lt;/h2>
&lt;h4 id="tidevice">tidevice&lt;/h4>
&lt;blockquote>
&lt;p>该工具能够用于与iOS设备进行通信, 提供以下功能&lt;/p>
&lt;ul>
&lt;li>截图&lt;/li>
&lt;li>获取手机信息&lt;/li>
&lt;li>ipa包的安装和卸载&lt;/li>
&lt;li>根据bundleID 启动和停止应用&lt;/li>
&lt;li>列出安装应用信息&lt;/li>
&lt;li>模拟Xcode运行XCTest，常用的如启动WebDriverAgent测试（此方法不依赖xcodebuild)&lt;/li>
&lt;li>获取指定应用性能(CPU,MEM,FPS)&lt;/li>
&lt;li>文件操作&lt;/li>
&lt;li>其他&lt;/li>
&lt;/ul>
&lt;p>支持运行在Mac，Linux，Windows上&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pip3 install -U &lt;span class="s2">&amp;#34;tidevice[openssl]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;h2 id="实现原理">实现原理&lt;/h2>
&lt;ul>
&lt;li>Jenkins有许多插件支持动态参数列表，比如&lt;code>Extended-Choice-Parameter&lt;/code>，又比如&lt;code>Active Choice&lt;/code>，综合试用了一下选择了前者。&lt;/li>
&lt;li>&lt;a class="link" href="https://yanbo92.site/jenkins-extended-choice-parameter/" target="_blank" rel="noopener"
>（一）&lt;/a>文中只在参数的Value中编写了Groovy脚本动态获取手机id列表，而Value Description也可以通过Groovy来获取手机的名字，直接显示具体的型号&lt;/li>
&lt;li>把查询手机名称的命令，也就是&lt;code>adb devices -l&lt;/code>或者&lt;code>tidevice list&lt;/code>写成Groovy脚本传入&lt;code>Extended-Choice-Parameter&lt;/code>的&lt;code>Value Description&lt;/code>里&lt;/li>
&lt;/ul>
&lt;h2 id="具体实现代码">具体实现代码&lt;/h2>
&lt;h4 id="android">Android&lt;/h4>
&lt;p>如果你的手机都插在主节点&lt;code>master&lt;/code>上，可以用以下代码，填入&lt;code>Choose Source for Value Description - Groovy Script&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;adb devices -l&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">def&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但如果你的主节点和执行节点并不是同一个，需要在执行节点上去做动态获取，那么代码是这样的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">hudson.util.RemotingDiagnostics&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">jenkins.model.Jenkins&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">agent_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;节点名&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">groovy_script&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">println &amp;#34;adb devices -l&amp;#34;.execute().text
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">trim&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">def&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Jenkins&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">slaves&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">find&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">agent_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}.&lt;/span>&lt;span class="na">with&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RemotingDiagnostics&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeGroovy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">groovy_script&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="ios">iOS&lt;/h4>
&lt;p>类似的，把&lt;code>adb device&lt;/code>替换为&lt;code>idevice_id -l&lt;/code>，当然也可以用&lt;code>tidevice list&lt;/code>，只是要对参数做截断处理&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;tidevice list&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">def&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>master-slave模式代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">hudson.util.RemotingDiagnostics&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">jenkins.model.Jenkins&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">agent_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;节点名&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">groovy_script&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">println &amp;#34;tidevice list&amp;#34;.execute().text
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">trim&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">def&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Jenkins&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">slaves&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">find&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">agent_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}.&lt;/span>&lt;span class="na">with&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RemotingDiagnostics&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeGroovy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">groovy_script&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/148957030" target="_blank" rel="noopener"
>Jenkins 动态获取安卓设备作为参数 - 知乎 (zhihu.com)&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://yanbo92.site/jenkins-extended-choice-parameter/" target="_blank" rel="noopener"
>通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机)&lt;/a>&lt;/p></description></item><item><title>通过ifuse/tidevice库读写iPhone手机硬盘</title><link>https://yanbo92.site/read-write-iphone-disk/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/read-write-iphone-disk/</guid><description>&lt;img src="https://yanbo92.site/read-write-iphone-disk/cover.png" alt="Featured image of post 通过ifuse/tidevice库读写iPhone手机硬盘" />&lt;h2 id="背景">背景&lt;/h2>
&lt;p>在自动化测试的交付、执行过程中，偶尔需要对iPhone手机的硬盘进行读写操作，比如删除相册，拷贝素材等等。本文介绍两个通过命令行操作iPhone手机硬盘的工具，分别是&lt;code>ifuse&lt;/code>和&lt;code>tidevice&lt;/code>。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="工具介绍">工具介绍&lt;/h2>
&lt;h4 id="macfuse">MacFuse&lt;/h4>
&lt;blockquote>
&lt;h2 id="what-is-macfuse">What is macFUSE?&lt;/h2>
&lt;p>macFUSE allows you to extend macOS&amp;rsquo;s native file handling capabilities via third-party file systems.&lt;/p>
&lt;p>macFUSE允许你通过第三方文件系统扩展macOS的本地文件处理能力。&lt;/p>
&lt;h3 id="features">Features&lt;/h3>
&lt;p>As a user, installing the macFUSE software package will let you use any third-party FUSE file system. Legacy MacFUSE file systems are supported through the optional MacFUSE compatibility layer.&lt;/p>
&lt;p>As a developer, you can use the FUSE SDK to write numerous types of new file systems as regular user space programs. The content of these file systems can come from anywhere: from the local disk, from across the network, from memory, or any other combination of sources. Writing a file system using FUSE is orders of magnitude easier and quicker than the traditional approach of writing in-kernel file systems. Since FUSE file systems are regular applications (as opposed to kernel extensions), you have just as much flexibility and choice in programming tools, debuggers, and libraries as you have if you were developing standard macOS applications.&lt;/p>
&lt;p>作为一个用户，安装macFUSE软件包可以让你使用任何第三方FUSE文件系统。传统的MacFUSE文件系统通过可选的MacFUSE兼容层得到支持。&lt;/p>
&lt;p>作为开发者，你可以使用 FUSE SDK 来编写众多类型的新文件系统，作为常规的用户空间程序。这些文件系统的内容可以来自任何地方：来自本地磁盘，来自整个网络，来自内存，或任何其他来源的组合。使用FUSE编写文件系统比编写内核内文件系统的传统方法要容易得多，也快得多。由于 FUSE 文件系统是普通的应用程序（而不是内核扩展），你在编程工具、调试器和库方面的灵活性和选择与开发标准的 macOS 应用程序一样多。&lt;/p>
&lt;p>项目主页：&lt;a class="link" href="https://osxfuse.github.io/" target="_blank" rel="noopener"
>osxfuse.github.io&lt;/a>&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install osxfuse --cask
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;h4 id="ifuse">ifuse&lt;/h4>
&lt;blockquote>
&lt;p>&lt;em>A fuse filesystem implementation to access the contents of iOS devices.&lt;/em>&lt;/p>
&lt;p>一个Fuse文件系统的实现，用于访问iOS设备的内容。&lt;/p>
&lt;h2 id="features-1">Features&lt;/h2>
&lt;p>This project allows mounting various directories of an iOS device locally using the &lt;a class="link" href="https://github.com/libfuse/libfuse" target="_blank" rel="noopener"
>FUSE file system interface&lt;/a>.&lt;/p>
&lt;p>这个项目允许使用[FUSE文件系统接口]在本地挂载iOS设备的各种目录。&lt;/p>
&lt;p>Some key features are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Media&lt;/strong>: Mount media directory of an iOS device locally&lt;/li>
&lt;li>&lt;strong>Apps&lt;/strong>: Mount sandbox container or document directory of an app&lt;/li>
&lt;li>&lt;strong>Jailbreak&lt;/strong>: Mount root filesystem on jailbroken devices &lt;em>(requires AFC2 service)&lt;/em>&lt;/li>
&lt;li>&lt;strong>Browse&lt;/strong>: Allows to retrieve a list of installed file-sharing enabled apps&lt;/li>
&lt;li>&lt;strong>Implementation&lt;/strong>: Uses &lt;a class="link" href="https://github.com/libimobiledevice/libimobiledevice" target="_blank" rel="noopener"
>libimobiledevice&lt;/a> for communication with the device&lt;/li>
&lt;/ul>
&lt;p>主要特性如下&lt;/p>
&lt;ul>
&lt;li>&lt;strong>媒体&lt;/strong>。在本地安装iOS设备的媒体目录&lt;/li>
&lt;li>&lt;strong>Apps&lt;/strong>。挂载一个应用程序的沙盒容器或文档目录。&lt;/li>
&lt;li>&lt;strong>越狱&lt;/strong>。在已越狱的设备上挂载根文件系统 &lt;em>（需要AFC2服务）&lt;/em>。&lt;/li>
&lt;li>&lt;strong>浏览&lt;/strong>。允许检索已安装的支持文件共享的应用程序的列表&lt;/li>
&lt;li>&lt;strong>实施&lt;/strong>。使用[libimobiledevice]与设备进行通信&lt;/li>
&lt;/ul>
&lt;p>项目主页：&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install ifuse
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果装不上，把系统时间改到2021年4月6日之前即可。但时间改了之后又会出现443:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">curl: (35) LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to ghcr.io:443
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以正确的操作流程是要在通过了brew校验这个包可以装之后再改回正常的时间，以通过下载包所需要的SSL校验，毫秒级操作，不过多试几次就能装上去。&lt;/p>
&lt;p>此项目依赖osxfuse，请先安装上面的osxfuse。&lt;/p>
&lt;/blockquote>
&lt;h4 id="tidevice">tidevice&lt;/h4>
&lt;blockquote>
&lt;p>该工具能够用于与iOS设备进行通信, 提供以下功能&lt;/p>
&lt;ul>
&lt;li>截图&lt;/li>
&lt;li>获取手机信息&lt;/li>
&lt;li>ipa包的安装和卸载&lt;/li>
&lt;li>根据bundleID 启动和停止应用&lt;/li>
&lt;li>列出安装应用信息&lt;/li>
&lt;li>模拟Xcode运行XCTest，常用的如启动WebDriverAgent测试（此方法不依赖xcodebuild)&lt;/li>
&lt;li>获取指定应用性能(CPU,MEM,FPS)&lt;/li>
&lt;li>文件操作&lt;/li>
&lt;li>其他&lt;/li>
&lt;/ul>
&lt;p>支持运行在Mac，Linux，Windows上&lt;/p>
&lt;p>项目主页：&lt;a class="link" href="https://github.com/alibaba/taobao-iphone-device" target="_blank" rel="noopener"
>alibaba/taobao-iphone-device&lt;/a>&lt;/p>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pip3 install -U &lt;span class="s2">&amp;#34;tidevice[openssl]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;h2 id="实现原理">实现原理&lt;/h2>
&lt;ul>
&lt;li>通过阅读源码可以得知，&lt;code>ifuse&lt;/code>依赖&lt;code>libimobiledevice&lt;/code>，同时是基于&lt;code>usbmux&lt;/code>实现的，换言之，该库只支持通过电脑usb连接手机来通信。ifuse将手机硬盘的某一部分挂载到电脑硬盘上，再通过正常的文件读写操作去控制。&lt;/li>
&lt;li>而&lt;code>tidevice&lt;/code>则是把&lt;code>instruments&lt;/code>协议整个用python实现了一遍，这是支持&lt;strong>无线&lt;/strong>连接手机的。并且开发者将常用文件操作封装了一层，支持&lt;code> rm cat pull push stat tree rmtree mkdir ls&lt;/code> 等操作，有点adb的味道。&lt;/li>
&lt;/ul>
&lt;h2 id="具体实现代码">具体实现代码&lt;/h2>
&lt;h4 id="ifuse读写手机内存">ifuse读写手机内存&lt;/h4>
&lt;p>首先新建一个mount_point目录用于挂载手机硬盘：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mkdir mount_point
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后用默认参数挂载，这样将会挂载整个&lt;code>Media&lt;/code>目录，可以拿到&lt;code>DCIM&lt;/code>以及&lt;code>Downloads&lt;/code>之类的目录内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % ifuse -u c6b0ab4fa8867c51cf1c5b6d8cd076d3957192b2 mount_point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % ls mount_point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AirFair MediaAnalysis Purchases afk(1).zip rd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Books PhotoData Radio afk_screenshots
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DCIM Photos Recordings general_storage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Downloads PublicStaging afk iTunes_Control
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以像自己电脑上的目录一样去读写，比如&lt;code>rm&lt;/code>，&lt;code>mkdir&lt;/code>之类的都没问题。&lt;/p>
&lt;p>卸载掉：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">umount mount_point
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>还有另一种更强力的卸载，毕竟这个库经常会卸载不掉：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">diskutil unmount force mount_point
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再试试指定APP包名的挂载方式，此处用的是Alook浏览器&lt;code>com.ld.TakeBrowser&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % ifuse --documents com.ld.TakeBrowser -u c6b0ab4fa8867c51cf1c5b6d8cd076d3957192b2 mount_point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % ls mount_point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Audios Images Videos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Documents Others Zipped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里挂载了APP的Documents目录，同样可以使用的参数还有&lt;code>--container&lt;/code>&lt;/p>
&lt;h4 id="tidevice读写手机内存">tidevice读写手机内存&lt;/h4>
&lt;p>首先新建一个txt用于调试&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">touch file.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类似的，查看&lt;code>Media&lt;/code>下的目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % tidevice fsync ls /DCIM/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[&amp;#39;.DS_Store&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;104APPLE&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;._.DS_Store&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;103APPLE&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;102APPLE&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;.MISC&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;101APPLE&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;100APPLE&amp;#39;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>删除一张照片：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % tidevice fsync rm /DCIM/104APPLE/IMG_4334.JPG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;AFCStatus.SUCCESS: 0&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>操作特定的APP目录，需要使用&lt;code>-B&lt;/code>参数：&lt;/p>
&lt;p>ls操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % tidevice fsync -B com.ld.TakeBrowser ls /Documents
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[&amp;#39;Zipped&amp;#39;, &amp;#39;Documents&amp;#39;, &amp;#39;Videos&amp;#39;, &amp;#39;Others&amp;#39;, &amp;#39;Images&amp;#39;, &amp;#39;Audios&amp;#39;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>push操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacBook-Pro ~ % tidevice fsync -B com.ld.TakeBrowser push file.txt /Documents/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pushed to /Documents/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类似的支持的操作还有如下几个：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{rm,cat,pull,stat,tree,rmtree,mkdir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="使用建议">使用建议&lt;/h4>
&lt;p>个人认为在功能没有差异的情况下，使用&lt;code>tidevice&lt;/code>要比&lt;code>ifuse&lt;/code>方便得多，有如下原因&lt;/p>
&lt;ul>
&lt;li>基于Python实现，相对于ifuse使用C的实现更适合脚本集成，可以直接用python的&lt;code>import&lt;/code>使用，无需使用类似&lt;code>os.system()&lt;/code>这种粗暴的方式&lt;/li>
&lt;li>&lt;code>tidevice&lt;/code>无需挂载到本机，实际使用起来&lt;code>ifuse&lt;/code>经常出现某个目录卸载失败，需要重启电脑这样的情况，会出现&lt;code>Input/Output Error&lt;/code>，也就是规避掉了关闭通道异常这种风险&lt;/li>
&lt;li>&lt;code>tidevice&lt;/code>基于&lt;code>instruments&lt;/code>实现，支持无线连接手机，当你的测试手机USB口被占用时，&lt;code>tidevice&lt;/code>是唯一的选择。&lt;/li>
&lt;/ul></description></item><item><title>通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机</title><link>https://yanbo92.site/jenkins-extended-choice-parameter/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/jenkins-extended-choice-parameter/</guid><description>&lt;img src="https://yanbo92.site/jenkins-extended-choice-parameter/cover.png" alt="Featured image of post 通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机" />&lt;h2 id="背景">背景&lt;/h2>
&lt;p>在自动化测试的交付、执行过程中，很难绕开当下大热的CI/CD工具Jenkins。而Jenkins中原生的参数类型比较单一，难以实现动态化。为了交付一些UI自动化脚本，测试工程师需要先选择执行手机、执行版本等等内容，其中选择执行手机这一步骤如果只用文本参数来实现，用户的使用场景类似这样：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>开命令行，执行&lt;code>adb device &lt;/code>或者&lt;code>idevice_id -l&lt;/code>&lt;/li>
&lt;li>将手机id粘贴到Jenkins执行参数中，运行&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>本文提供一种一步到位的选择参数实现。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="工具介绍">工具介绍&lt;/h2>
&lt;h4 id="jenkins">Jenkins&lt;/h4>
&lt;blockquote>
&lt;p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。&lt;/p>
&lt;/blockquote>
&lt;h4 id="extended-choice-parameter">Extended-Choice-Parameter&lt;/h4>
&lt;blockquote>
&lt;p>Extended-Choice-Parameter是一款Jenkins插件，主要功能为对选择参数进行扩展，用于实现多选参数、实现选项动态获取等更强大的功能&lt;/p>
&lt;/blockquote>
&lt;h4 id="groovy">Groovy&lt;/h4>
&lt;blockquote>
&lt;p>Groovy是一种基于&lt;a class="link" href="https://baike.baidu.com/item/JVM" target="_blank" rel="noopener"
>JVM&lt;/a>（&lt;a class="link" href="https://baike.baidu.com/item/Java%e8%99%9a%e6%8b%9f%e6%9c%ba" target="_blank" rel="noopener"
>Java虚拟机&lt;/a>）的敏捷开发语言，它结合了&lt;a class="link" href="https://baike.baidu.com/item/Python" target="_blank" rel="noopener"
>Python&lt;/a>、&lt;a class="link" href="https://baike.baidu.com/item/Ruby/11419" target="_blank" rel="noopener"
>Ruby&lt;/a>和&lt;a class="link" href="https://baike.baidu.com/item/Smalltalk" target="_blank" rel="noopener"
>Smalltalk&lt;/a>的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy也可以使用其他非Java语言编写的库。&lt;/p>
&lt;/blockquote>
&lt;h2 id="实现原理">实现原理&lt;/h2>
&lt;ul>
&lt;li>Jenkins有许多插件支持动态参数列表，比如&lt;code>Extended-Choice-Parameter&lt;/code>，又比如&lt;code>Active Choice&lt;/code>，综合试用了一下选择了前者。&lt;/li>
&lt;li>把查询手机id的命令，也就是&lt;code>adb devices&lt;/code>或者&lt;code>idevice_id -l&lt;/code>写成Groovy脚本传入&lt;code>Extended-Choice-Parameter&lt;/code>的&lt;code>Value&lt;/code>里&lt;/li>
&lt;/ul>
&lt;h2 id="具体实现代码">具体实现代码&lt;/h2>
&lt;h4 id="android">Android&lt;/h4>
&lt;p>如果你的手机都插在主节点&lt;code>master&lt;/code>上，可以用以下代码，填入&lt;code>Choose Source for Value - Groovy Script&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;adb devices&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">def&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但如果你的主节点和执行节点并不是同一个，需要在执行节点上去做动态获取，那么代码是这样的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">hudson.util.RemotingDiagnostics&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">jenkins.model.Jenkins&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">agent_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;节点名&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">groovy_script&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">println &amp;#34;adb devices&amp;#34;.execute().text
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">trim&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">def&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Jenkins&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">slaves&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">find&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">agent_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}.&lt;/span>&lt;span class="na">with&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RemotingDiagnostics&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">executeGroovy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">groovy_script&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">channel&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="ios">iOS&lt;/h4>
&lt;p>类似的，把&lt;code>adb device&lt;/code>替换为&lt;code>idevice_id -l&lt;/code>，当然也可以用&lt;code>tidevice list&lt;/code>，只是要对参数做截断处理&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;idevice_id -l&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">def&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">replaceAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;\tdevice&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/148957030" target="_blank" rel="noopener"
>Jenkins 动态获取安卓设备作为参数 - 知乎 (zhihu.com)&lt;/a>&lt;/p></description></item></channel></rss>