<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>重签名解决光环助手频繁掉签问题 on 茅测顿开</title>
    <link>https://yanbo92.github.io/</link>
    <description>Recent content in 重签名解决光环助手频繁掉签问题 on 茅测顿开</description>
    <image>
      <url>https://yanbo92.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yanbo92.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 11 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yanbo92.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>腾讯性能狗收费之后，我写了一款iOS性能测试工具</title>
      <link>https://yanbo92.github.io/ios-perf/</link>
      <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/ios-perf/</guid>
      <description>运行效果 项目介绍 项目地址：yanbo92/iOS-perf
性能测试一直是APP测试的一个重要部分，而在Android上由于系统的开放特性，相关工具支持比较多，比如solopi等。但在iOS上，腾讯家的perfdog本来还是十分好用的，但收费了就有点难受，而直接用Xcode的Instruments又对Mac有刚需，很难支撑公司的测试需求。此时看到这个贴子，上手跑了几次，还挺好用的，于是就顺着思路做了下去，有了这个比较完善的项目。
当前支持获取的性能数据包括GPU、CPU、内存、FPS、功耗、网络、温度，以及一系列手机硬件数据，并将根据需求继续新增。
本项目基于jlintxia开源的iOS测试方案修改而来，增加动态建表，动态增加grafana面板以及docker打包环境等特性。其中iOS性能数据来源于开源工具tidevice和py-ios-device。
注意：本项目依赖MySQL进行性能数据存储，Grafana进行数据动态展示，也就是说需要在本机或者可达的网络（比如公司局域网） 上搭建MySQL+Grafana服务，我提供了一份docker-compose.yml文件，可以使用docker快速搭建一套环境。
相关工具介绍 Grafana  Grafana是一个跨平台、开源的数据可视化网络应用程序平台。用户配置连接的数据源之后，Grafana可以在网络浏览器里显示数据图表和警告。该软件的企业版本提供更多的扩展功能。扩展功能通过插件的形式提供，终端用户可以自定义自己的数据面板界面以及数据请求方式。
 Mysql  MySQL原本是一个开放源码的关系数据库管理系统，原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统收购。2009年，甲骨文公司收购昇阳微系统公司，MySQL成为Oracle旗下产品。
 py-ios-device  win，mac 跨平台方案，通过 Instruments 私有协议获取 iOS 相关性能指标数据。
相关文章链接:https://testerhome.com/topics/27159
 taobao-iphone-device  tidevice 是阿里的内部的一个小组用来做 iOS 自动化用的工具，通过逆向iOS通信协议，使用纯Python实现。目前淘宝和其他部分事业部已经全面使用了该技术，进行iOS应用的性能采集，UI自动化。
注：这里的被测应用无需做任何修改，使用不再局限于Mac上。
 使用步骤 准备工作 服务端搭建依赖docker以及docker-compose，安装指南：
 https://dockerdocs.cn/get-docker/
https://dockerdocs.cn/get-started/08_using_compose/
 运行测试依赖python3环境，安装指南：
 https://www.python.org/downloads/
 服务端搭建 命令行运行
docker -v &amp;amp;&amp;amp; docker-compose -v 如果能正常输出版本，如下，则表示docker环境正常，可以继续
 Docker version 20.10.8, build 3967b7d
docker-compose version 1.29.2, build 5becea4c
 拉取镜像并启动服务：
docker-compose up -d 提示：初次打开Grafana时，系统会提示你修改密码，为了方便建议不修改，即保持账号密码均为admin，否则在python运行指令中将要进行对应的传参。</description>
    </item>
    
    <item>
      <title>使用yololib注入fastbot-stub并重签名运行测试</title>
      <link>https://yanbo92.github.io/fastbot-stub-inject/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/fastbot-stub-inject/</guid>
      <description>背景 Monkey测试一直是一种强度较高，性价比较高的测试手段，但在iOS平台上，工具用起来总有各种各样的苦难。今年字节跳动开源了一款自动化测试工具bytedance/Fastbot_iOS，效果非常好。但默认实现是基于纯图像识别的，有时候难免遇到一些靠图像不好处理的地方，陷入覆盖率较低的境地。但好在项目也提供了stub模式，只是上手有一定的技术门槛。刷了一下Github的issue，在开发者geron-cn的启发下了解到了yololib，本文将提供一种通过yololib注入方式使用fastbot-stub的方案。
相关项目介绍 Fastbot_iOS  2019 年字节跳动 Quality Lab 在自动测试生成方面进行了比较深入的探索，并研发了针对 Android、iOS 的稳定性测试工具 Fastbot。Fastbot 的核心技术主要包括：
智能遍历：使用基于模型的测试生成（MBT），并提供多种算法策略，以获得较高的 Activity 覆盖率及问题发现能力； 多机协同：最高支持数百台长时间多机协同遍历，同一个目标彼此协作； 个性化的专家系统：业务方可以进行多种个性化配置，比如：限定测试在指定的 Activity 运行，屏蔽测试某些场景； 模型复用：基于强化学习利用历史测试经验数据学习改进当次测试策略； 复杂用例生成：对人工用例进行模仿学习，遍历过程中混合复杂用例的组合生成； 精准定向：根据代码调用链变更自动生成针对变更场景的定向测试。
 yololib  yololib是Kim Jong Cracks（Clutch 砸壳的作者）小组搞出来的一个dylib注入工具，利用这个工具，大大方便我们修改Mach-O 文件的 Load Command。以达到注入动态库的目的。用法如下
 yololib [binary] [dylib file]
  LTResign  LTResign是一个用Python编写的重签名工具，这是iOS逆向绕不开的东西，但同类脚本有很多，作者通常用这个以及GQResign。
 Swift-30-Projects  这个项目是一个由30个iOS小项目组成的合集，本文使用的调试app就是项目中的04 ToDo，clone下来打包一个ipa即可。当然也可以换成其他脱了壳或者没上架Appstore的ipa包，我用这个只是因为体积比较小，打包和重签名都比较快。
 实现原理 注入和重签名都是iOS逆向老生常谈的话题，基于这两个技术也产生了大量围绕iOS开发者证书的黑灰产，例如光环助手等。Fastbot-stub要求在App中加入fastbot-stub.framework，合入依赖重新编译打包，就是注入动态库重签名这样的方案了。
 注入：逆向修改三方应用,让三方应用执行我们的代码，这就是代码注入，动态库注入是一种方式。其中动态库注入分为framework注入与dylib注入。此处fastbot-stub编译产物为.framework。 重签名：说白了重签名是一个偷天换日的过程，需要真机编译一个别的工程得到一份描述文件，再把需要重签名app的MachO以及frameworks都重新上一遍签名，当然，成熟的重签名脚本Github上有很多了，原理什么的有兴趣可以细看。  具体步骤 环境准备 此处需要准备好的东西：
 一台Mac 一个砸壳后的ipa包 开发者证书，以及可用的描述文件 yololib可执行文件 LTResign可执行文件 fastbot-stub.framework  砸壳的ipa： 建议找你家开发直接打一个adhoc包，顺便要一份开发者证书，以及可用的描述文件。或者有代码权限的测试老哥们自己动手打一个，实在想用线上APP的需要砸壳，可以看看这个工具iOS App 自动砸壳平台，或者通过第三方平台下ipa包，比如爱思助手、PP助手，最折腾但能学到东西的方案：搞一台越狱的iPhone用clutch自己砸</description>
    </item>
    
    <item>
      <title>使用Heroku免费搭建的Miniflux RSS服务</title>
      <link>https://yanbo92.github.io/miniflux-heroku/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/miniflux-heroku/</guid>
      <description>何为RSS  RSS（简易信息聚合，也叫Really Simple Syndication、聚合RSS、聚合内容），是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含了全文或是节录的文字，再加上发用者所订阅之网摘布数据和授权的元数据。通常在时效性比较强的内容上使用RSS订阅能更快速获取信息，网站提供RSS输出，有利于让用户获取网站内容的最新更新。网络用户可以在客户端借助于支持RSS的聚合工具软件（例如SharpReader、NewzCrawler、FeedDemon），在不打开网站内容页面的情况下阅读支持RSS输出的网站内容。
 在信息碎片化严重的今天，内容平台连网页版都想砍掉，强制用户安装APP。拥有一套自己的RSS方案能让你更轻松的获得关注的信息，逃离推荐算法带来的信息茧房。
何为Miniflux Miniflux是一个极简、快速、轻便且易于安装的Feed订阅器，有如下特性
 支持自定义刷新和拉取时间，避免打开 RSS 时浏览过时（半小时、几个小时前）的信息 极简&amp;amp;纯粹，FreshRSS 、Tiny Tiny RSS 无论从界面还是功能，都太重了。 支持图片代理，即服务器缓存图片，默认情况下，客户端是从 RSS 源头拉取的图片，这个有特殊的场景。 支持 Fever API ，可以跨平台。 使用 WatchTower 实现 Miniflux docker 自动更新。 Web 端支持快捷键。  搭建教程  前往Heroku注册一个账号 访问anyuzu99/heroku-miniflux at main 注意确认切换到了main分支，下拉到底，点击heroku button超链接 填入APP_NAME以及ADMIN_PASSWORD等等环境变量，点击Deploy 稍等几分钟，你的域名就可以访问啦 附一份Miniflux的环境变量详解  参考 Miniflux - Minimalist and Opinionated Feed Reader
Cloud Application Platform | Heroku
anyuzu99/heroku-miniflux: one click to deploy miniflux on heroku</description>
    </item>
    
    <item>
      <title>使用crash2json库将iOS崩溃日志解析成json文件</title>
      <link>https://yanbo92.github.io/crash2json/</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/crash2json/</guid>
      <description>项目背景  为了对iOS崩溃日志进行进一步的分析，需要将崩溃日志中的信息拆分成不同的部分，取其中的一部分或者多个部分进行存储、对比，于是我写了一个python库将.crash文件转换成.json文件。 鉴于Apple在iOS15上已经将崩溃文件存储成类似json的格式，本库仅在iOS15以下的版本发挥作用。  操作步骤 安装crash2json pip install crash2json 命令行直接运行 crash2json yourcrashreport.crash 其他参数 positional arguments: crash_fileoptional arguments: -h, --help show this help message and exit --binary_image_list_only parse binary_image_list to json only --crashed_thread_state_only parse crashed_thread_state to json only --diagnostic_messages_only parse diagnostic_messages to json only --exception_backtrace_only parse exception_backtrace to json only --exception_information_only parse exception_information to json only --header_only parse header to json only --other_threads_backtrace_only parse other_threads_backtrace to json only --thread0_backtrace_only parse thread0_backtrace to json only -s, --simple output a simple json with only header, exceptionInfo, diagnositcMsg, Thread0Backtrace -o OUTPUT_NAME, --output_name OUTPUT_NAME the .</description>
    </item>
    
    <item>
      <title>使用pbxproj添加fastbot-stub.framework并运行测试</title>
      <link>https://yanbo92.github.io/fastbot-stub-pbxproj/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/fastbot-stub-pbxproj/</guid>
      <description>背景 Monkey测试一直是一种强度较高，性价比较高的测试手段，但在iOS平台上，工具用起来总有各种各样的苦难。今年字节跳动开源了一款自动化测试工具bytedance/Fastbot_iOS，效果非常好。但默认实现是基于纯图像识别的，有时候难免遇到一些靠图像不好处理的地方，陷入覆盖率较低的境地。但好在项目也提供了stub模式，只是上手有一定的技术门槛。之前的文章使用yololib注入fastbot-stub并重签名运行测试介绍了一种逆向手法使用fastbot-stub。本文将介绍一种从Xcode编译角度加入fastbot-stub的方法，当然，这需要app的完整代码。
相关项目介绍 Fastbot_iOS  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。
 mod-pbxproj  这是一个可以通过命令行修改Xcode项目依赖的python模块，便于在不使用界面的情况下增加或者删除库。
 Swift-30-Projects  这个项目是一个由30个iOS小项目组成的合集，本文使用的调试app就是项目中的04 ToDo，clone下来打包一个ipa即可。当然也可以换成其他脱了壳或者没上架Appstore的ipa包，我用这个只是因为体积比较小，打包和重签名都比较快。
 实现原理 通过pbxproj工具向Xcode项目中添加fasbot-stub.framework动态库，并重新编译，达到让APP支持stub模式的效果。
具体步骤 环境准备 此处需要准备好的东西：
 一台Mac 测试APP的代码 开发者证书，以及可用的描述文件 Python环境 fastbot-stub.framework  Python环境安装pbxproj sudo pip install pbxproj fastbot-stub.framework 按照Fastbot-iOS项目的Readme打开Fastbot-iOS.xcworkspace，编译即可，完整命令：
git clone git@github.com:bytedance/Fastbot_iOS.git cd Fastbot-iOS &amp;amp;&amp;amp; pod install --repo-update open Fastbot-iOS.xcworkspace 然后target选择fastbot-stub，连一台真机编译，得到产物fastbot-stub.framework
添加动态库 同样的，我们用上一篇文章的todo项目，编写python文件如下：
from pbxproj import XcodeProject from pbxproj.pbxextensions.ProjectFiles import FileOptions import time project = XcodeProject.load(&amp;#39;Swift-30-Projects/Project 04 - TodoTDD/ToDo.xcodeproj/project.pbxproj&amp;#39;) file_options = FileOptions(weak=True) project.add_file(&amp;#39;fastbot_stub.framework&amp;#39;, force=False, file_options=file_options) project.</description>
    </item>
    
    <item>
      <title>调用接口推送消息到你iPhone——iOS开源项目Bark</title>
      <link>https://yanbo92.github.io/bark/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/bark/</guid>
      <description>最终效果  通过特定的接口直接往iPhone上发送通知 支持链接转跳 支持一键复制 支持自定义图标  项目介绍  传统通知方式例如邮件、聊天软件来做自动提醒还是略微麻烦。
Bark提供http接口，简单调用即可给自己的iPhone发送推送。
可以为你带来非常及时、稳定可靠、隐私安全的推送服务。
Bark不会消耗设备的电量， 核心功能是基于系统推送服务与推送扩展，APP本体并不需要运行。
Bark可以非常可靠的保证你的隐私安全。
你可以手动或通过docker在自己的服务器上运行Bark服务端，或者自行实现服务端。
数据将在 你的服务器-系统推送服务器-你的设备 之间传输，确保任何推送信息都不会被泄漏。
APP 是通过 Github Action 编译上传，保证你使用的APP版本是由开源代码编译，未经任何人修改（验证方法请在 APP 内查看)。
Bark保存在本地的通知消息历史也非常安全。
通过 NotificationServiceExtension 扩展，在收到推送时将推送信息保存在本地，不会经过其他任何设备。
历史记录仅由个人iCloud私有库进行同步，可以确保你产生的任何通知，将只留在你的设备与你的iCloud中
 相关链接 项目主页
作者博客
App Store
使用说明 内容推送  打开APP，复制测试URL  修改内容，请求这个URL  可以发 get 或者 post 请求 ，请求成功会立即收到推送 URL 组成: 第一个部分是 key , 之后有三个匹配 /:key/:body /:key/:title/:body /:key/:category/:title/:body title 推送标题 比 body 字号粗一点 body 推送内容 换行请使用换行符 &amp;#39;\n&amp;#39; category 另外的功能占用的字段，还没开放 忽略就行 post 请求 参数名也是上面这些 复制参数 收到推送时下拉推送（或在通知中心左滑查看推送）有一个复制按钮，点击即可复制推送内容。</description>
    </item>
    
    <item>
      <title>Auto.JS中杀死其他脚本的方法</title>
      <link>https://yanbo92.github.io/autojs-kill-scripts/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/autojs-kill-scripts/</guid>
      <description>Auto.JS介绍  Auto.js Pro是什么 一个在Android、鸿蒙平台编写、运行JavaScript代码的集成开发环境，包括代码补全的编辑器、单步调试、图形化设计，可构建为独立apk应用，也可连接电脑开发。
Auto.js Pro能做什么 创建自动化工具、效率工具、优美界面、小应用，诸如早晨自动签到、处理文件为excel、图片批量处理、机器人、自动化测试、搭建服务器等，或解放双手，或学习编程，或制作应用。
为什么选择Auto.js Pro 完善的文档和示例、丰富的API、增强的加密、活跃的更新，用JavaScript连接Java、Android、Node.js的生态。
 注：Auto.JS与Auto.JS Pro的区别在于，前者是免费、开源的，但是已经停更多年，后者需要付费，但仍在持续更新，提供更多的功能。Auto.js 开源版本已不再维护(原因参见Auto.js Pro FAQ)，后续将只维护Auto.js Pro专业版。
官网链接 Auto.JS
Auto.JS Pro
杀死APP具体实现 实现原理  调用engines.all()方法获取当前正在运行的所有引擎对象（返回对象数组） 再调用engines.myEngine()方法获取当前正在前台运行这个方法的对象（返回单个对象） 进行对象比对后再调用engine.forceStop()方法杀死非当前引擎对象 该方法能避免用户反复运行脚本，导致脚本互相干扰、资源占用等情况  完整代码 function kill_scripts() { allNgs = engines.all() myNg = engines.myEngine() for (var i = 0; i &amp;lt; allNgs.length; ++i) { if (!(allNgs[i] === myNg)) { allNgs[i].forceStop() } } } kill_scripts() </description>
    </item>
    
    <item>
      <title>Auto.JS中免Root杀死APP的巧妙方法</title>
      <link>https://yanbo92.github.io/autojs-kill-app/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/autojs-kill-app/</guid>
      <description>Auto.JS介绍  Auto.js Pro是什么 一个在Android、鸿蒙平台编写、运行JavaScript代码的集成开发环境，包括代码补全的编辑器、单步调试、图形化设计，可构建为独立apk应用，也可连接电脑开发。
Auto.js Pro能做什么 创建自动化工具、效率工具、优美界面、小应用，诸如早晨自动签到、处理文件为excel、图片批量处理、机器人、自动化测试、搭建服务器等，或解放双手，或学习编程，或制作应用。
为什么选择Auto.js Pro 完善的文档和示例、丰富的API、增强的加密、活跃的更新，用JavaScript连接Java、Android、Node.js的生态。
 注：Auto.JS与Auto.JS Pro的区别在于，前者是免费、开源的，但是已经停更多年，后者需要付费，但仍在持续更新，提供更多的功能。Auto.js 开源版本已不再维护(原因参见Auto.js Pro FAQ)，后续将只维护Auto.js Pro专业版。
官网链接 Auto.JS
Auto.JS Pro
杀死APP具体实现 实现原理  调用openAppSetting(packageName)方法打开系统设置中对应APP的设置页 通过控件操作点击强制停止，确认等按钮，达到杀死APP的目的 该方法巧妙的规避了通过adb shell kill或者 adb shell am force-stop方法带来的权限问题  完整代码 function kill_app(packageName) { var name = getPackageName(packageName); if (!name) { if (getAppName(packageName)) { name = packageName; } else { return false; } } app.openAppSetting(name); text(app.getAppName(name)).waitFor(); let is_sure = textMatches(/(.*强.*|.*停.*|.*结.*|.*行.*)/).findOne(); if (is_sure.enabled()) { textMatches(/(.*强.*|.*停.*|.*结.*|.*行.*)/).findOne().click(); textMatches(/(.*确.*|.*定.*)/).findOne().click(); log(app.</description>
    </item>
    
    <item>
      <title>Mac电脑使用FastGithub加速并配置命令行代理、开机自动启动</title>
      <link>https://yanbo92.github.io/fastgithub/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/fastgithub/</guid>
      <description>最终效果 浏览器、命令行低延迟访问github，刷项目、拉依赖访问正常
项目介绍  FastGithub是一款github加速神器，解决github打不开、用户头像无法加载、releases无法上传下载、git-clone、git-pull、git-push失败等问题。
 项目主页 FastGithub
加速实现原理  windows  客户端访问https://github.com 客户端向dns查询github.com的ip，FastGithub拦截dns数据包并伪造解析结果为127.0.0.1 客户端请求到FastGithub的https://127.0.0.1:443 FastGithub使用fastgithub.cer颁发服务器证书给客户端 FastGithub查询和计算github.com最快的ip FastGithub与github.com进行无sni的tls连接 FastGithub将请求反向代理到https://github.com  linux/osx  客户端访问https://github.com 客户端使用fagithub的代理端口38457代理请求 FastGithub将代理的流量请求到自身的反向代理服务 FastGithub使用fastgithub.cer颁发服务器证书给客户端 FastGithub查询和计算github.com最快的ip FastGithub与github.com进行无sni的tls连接 FastGithub将请求反向代理到https://github.com   配置步骤 下载、解压文件 下载链接中的最新osx压缩包，命名类似fastgithub_osx-x64.zip
Releases
安装证书  解压后，双击运行Unix可执行文件fastgithub，同目录下将会生成cert目录 双击cert目录中的fastgithub.cer证书文件，并设置为信任方式为始终信任  设置代理 系统代理
  打开设置-网络，选择使用的网络模式，比如wifi
  点击左下角黄色锁，解锁
  点击高级，代理，勾选自动代理配置
  填入URL：http://127.0.0.1:38457
  点击右下角应用
  命令行代理环境变量
 编辑~/.zshrc或者~/.bashrc，这取决于你的shell用哪种 加入一行：  export https_proxy=http://127.0.0.1:38457 http_proxy=http://127.0.0.1:38457  保存，并运行source ~/.zshrc或者source ~/.</description>
    </item>
    
    <item>
      <title>使用Dockerfile和docker-compose搭建Sonar&#43;PostgreSQL代码扫描服务</title>
      <link>https://yanbo92.github.io/sonar-docker/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/sonar-docker/</guid>
      <description>项目背景  由于调试插件冲突需要，经常重装Sonar，但插件又要重新安装，于是自定义一个Dockerfile来预装我需要的插件，做成镜像 另外，Sonar自带的数据库较弱，官方只建议调试使用，并且会永远有一个Banner提示你更换数据库，所以使用docker-compose把Sonar和PostgreSQL数据库的镜像编排起来，一起搭建 默认环境：已安装docker和docker-compose  操作步骤 新建项目目录 mkdir sonar_postgres &amp;amp;&amp;amp; cd sonar_postgres 新建Dockerfile文件和docker-compose文件 touch Dockerfile &amp;amp;&amp;amp; touch docker-compose-yml 编辑Dockerfile，预装Sonar插件 Dockerfile文件内容：
FROMsonarqube:8.9-communityRUN wget -P /opt/sonarqube/extensions/plugins/ https://github.com/xuhuisheng/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-8.9/sonar-l10n-zh-plugin-8.9.jarRUN wget -P /opt/sonarqube/extensions/plugins/ https://github.com/tal-tech/sonar-swift/releases/download/1.5.1/tal-sonar-swift-plugin-1.5.1.jarRUN wget -P /opt/sonarqube/extensions/plugins/ https://github.com/detekt/sonar-kotlin/releases/download/2.3.0/sonar-detekt-2.3.0.jar使用最新版本的Sonar Community版，安装中文插件、swift插件以及kotlin插件。此处使用最粗暴的下载、拷贝jar文件的安装方法。通过挂载存储也可以实现相同的功能。
根据Dockerfile构建镜像 docker build -t sonarqube_plugins:v1 . 此处-t后面的第一个参数为镜像名字以及版本，第二个参数.为Dockerfile所在目录，下面使用docker-compose时将会用到镜像名字以及版本
使用docker-compose编排镜像 编辑文件docker-compose.yml：
version: &amp;#34;3&amp;#34; services: sonarqube: image: sonarqube_plugins:v1 expose: - 9000 ports: - &amp;#34;9000:9000&amp;#34; networks: - sonarnet environment: - sonar.jdbc.url=jdbc:postgresql://db:5432/sonar - sonar.jdbc.username=sonar - sonar.jdbc.password=sonar db: image: postgres networks: - sonarnet environment: - POSTGRES_USER=sonar - POSTGRES_PASSWORD=sonar networks: sonarnet: 启动容器 docker-compose up -d 此时在浏览器访问localhost:9000就能看到Sonar了</description>
    </item>
    
    <item>
      <title>通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机</title>
      <link>https://yanbo92.github.io/jenkins-extended-choice-parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/jenkins-extended-choice-parameter/</guid>
      <description>背景 在自动化测试的交付、执行过程中，很难绕开当下大热的CI/CD工具Jenkins。而Jenkins中原生的参数类型比较单一，难以实现动态化。为了交付一些UI自动化脚本，测试工程师需要先选择执行手机、执行版本等等内容，其中选择执行手机这一步骤如果只用文本参数来实现，用户的使用场景类似这样：
  开命令行，执行adb device 或者idevice_id -l 将手机id粘贴到Jenkins执行参数中，运行   本文提供一种一步到位的选择参数实现。
工具介绍 Jenkins  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。
 Extended-Choice-Parameter  Extended-Choice-Parameter是一款Jenkins插件，主要功能为对选择参数进行扩展，用于实现多选参数、实现选项动态获取等更强大的功能
 Groovy  Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy也可以使用其他非Java语言编写的库。
 实现原理  Jenkins有许多插件支持动态参数列表，比如Extended-Choice-Parameter，又比如Active Choice，综合试用了一下选择了前者。 把查询手机id的命令，也就是adb devices或者idevice_id -l写成Groovy脚本传入Extended-Choice-Parameter的Value里  具体实现代码 Android 如果你的手机都插在主节点master上，可以用以下代码，填入Choose Source for Value - Groovy Script
String content = &amp;#34;adb devices&amp;#34;.execute().text String[] str; str = content.split(&amp;#39;\n&amp;#39;); def result = []; for( String values : str ){ if(values.contains(&amp;#34;\tdevice&amp;#34;)){ result.add(values.replaceAll(&amp;#34;\tdevice&amp;#34;,&amp;#34;&amp;#34;)) } } result 但如果你的主节点和执行节点并不是同一个，需要在执行节点上去做动态获取，那么代码是这样的</description>
    </item>
    
    <item>
      <title>通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机(二)</title>
      <link>https://yanbo92.github.io/jenkins-extended-choice-parameter-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/jenkins-extended-choice-parameter-2/</guid>
      <description>背景 在通过Extended-Choice-Parameter插件将Jenkins参数选项动态设置为当前连接的iOS/Android手机)中，介绍了如何简单的把手机选择参数做成实时显示当前连接的设备列表，但实际使用下来，发现有以下两个小问题
 列表只能显示手机的id，可读性极差，仍然难以避免另外去查询手机名字以对应上id iOS列表基于idevice_id实现，其底层连接依赖USB，也就是说无法做到识别无线设备  基于以上考虑，进行一次细节优化
工具介绍 tidevice  该工具能够用于与iOS设备进行通信, 提供以下功能
 截图 获取手机信息 ipa包的安装和卸载 根据bundleID 启动和停止应用 列出安装应用信息 模拟Xcode运行XCTest，常用的如启动WebDriverAgent测试（此方法不依赖xcodebuild) 获取指定应用性能(CPU,MEM,FPS) 文件操作 其他  支持运行在Mac，Linux，Windows上
安装：
pip3 install -U &amp;#34;tidevice[openssl]&amp;#34;  实现原理  Jenkins有许多插件支持动态参数列表，比如Extended-Choice-Parameter，又比如Active Choice，综合试用了一下选择了前者。 （一）文中只在参数的Value中编写了Groovy脚本动态获取手机id列表，而Value Description也可以通过Groovy来获取手机的名字，直接显示具体的型号 把查询手机名称的命令，也就是adb devices -l或者tidevice list写成Groovy脚本传入Extended-Choice-Parameter的Value Description里  具体实现代码 Android 如果你的手机都插在主节点master上，可以用以下代码，填入Choose Source for Value Description - Groovy Script
String content = &amp;#34;adb devices -l&amp;#34;.execute().text String[] str; str = content.split(&amp;#39;\n&amp;#39;); def result = []; for( String values : str ){ if(values.</description>
    </item>
    
    <item>
      <title>通过ifuse/tidevice库读写iPhone手机硬盘</title>
      <link>https://yanbo92.github.io/read-write-iphone-disk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/read-write-iphone-disk/</guid>
      <description>背景 在自动化测试的交付、执行过程中，偶尔需要对iPhone手机的硬盘进行读写操作，比如删除相册，拷贝素材等等。本文介绍两个通过命令行操作iPhone手机硬盘的工具，分别是ifuse和tidevice。
工具介绍 MacFuse  What is macFUSE? macFUSE allows you to extend macOS&amp;rsquo;s native file handling capabilities via third-party file systems.
macFUSE允许你通过第三方文件系统扩展macOS的本地文件处理能力。
Features As a user, installing the macFUSE software package will let you use any third-party FUSE file system. Legacy MacFUSE file systems are supported through the optional MacFUSE compatibility layer.
As a developer, you can use the FUSE SDK to write numerous types of new file systems as regular user space programs.</description>
    </item>
    
    <item>
      <title>重签名解决光环助手频繁掉签问题</title>
      <link>https://yanbo92.github.io/halo-ipa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yanbo92.github.io/halo-ipa/</guid>
      <description>最终效果  付费证书只要仍在有效期内，账号内的设备都能不掉签使用游戏的ipa包 免费证书七天一次签名，可以用爱思助手之类的工具完成这个过程。  背景介绍  光环助手，隶属于广州加兔网络科技有限公司，是一款基于Android平台的多功能卡牌游戏助手，由光环团队制作，致力于为众手游玩家打造最优质的游戏氛围，成就最强卡牌管家。光环助手不但能节省手游玩家繁杂的游戏时间，带来更好更畅快的游戏体验；更会为玩家实时更新最新游戏资讯，搜罗大量游戏攻略以及“小编带你玩”等诸多精品栏目。
光环修改版的游戏提供以下悬浮窗功能
 内置攻略 内置15倍可调节加速 内置连点器，支持调节频率，次数以及保存脚本功能   操作教程 手动找出ipa地址   使用电脑或者将手机浏览器UA设置为PC进入iOS光环助手下载页
  找到想要下载的游戏，点击下载
  此时地址栏会暴露一个itms-services的url，这是一种无需经过App Store来分发ipa的服务
  比如url为
  itms-services://?action=download-manifest&amp;amp;url=https://ios-api.ghzs.com/install-plist/61f36f94ef0f37e259a8be73.plist 取参数中的url部分，也就是这个plist文件的地址  https://ios-api.ghzs.com/install-plist/61f36f94ef0f37e259a8be73.plist 直接用浏览器访问，将得到一个xml页面  This XML file does not appear to have any style information associated with it. The document tree is shown below. &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;items&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;assets&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;kind&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;software-package&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;url&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;https://ios-d.</description>
    </item>
    
  </channel>
</rss>
