<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenSource on yanbo92.site</title><link>https://yanbo92.site/categories/opensource/</link><description>Recent content in OpenSource on yanbo92.site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 11 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yanbo92.site/categories/opensource/index.xml" rel="self" type="application/rss+xml"/><item><title>腾讯性能狗收费之后，我写了一款iOS性能测试工具</title><link>https://yanbo92.site/ios-perf/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://yanbo92.site/ios-perf/</guid><description>&lt;img src="https://yanbo92.site/ios-perf/iOS-perf-1.png" alt="Featured image of post 腾讯性能狗收费之后，我写了一款iOS性能测试工具" />&lt;h2 id="运行效果">运行效果&lt;/h2>
&lt;p>&lt;img src="https://yanbo92.site/ios-perf/iOS-perf-1.png"
width="3426"
height="1990"
srcset="https://yanbo92.site/ios-perf/iOS-perf-1_huf985558f52f94ae7d6333bd201a6f5cc_710078_480x0_resize_box_3.png 480w, https://yanbo92.site/ios-perf/iOS-perf-1_huf985558f52f94ae7d6333bd201a6f5cc_710078_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ios-perf"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;h2 id="项目介绍">项目介绍&lt;/h2>
&lt;p>项目地址：&lt;a class="link" href="https://github.com/yanbo92/iOS-perf" target="_blank" rel="noopener"
>yanbo92/iOS-perf&lt;/a>&lt;/p>
&lt;p>性能测试一直是APP测试的一个重要部分，而在&lt;code>Android&lt;/code>上由于系统的开放特性，相关工具支持比较多，比如&lt;code>solopi&lt;/code>等。但在&lt;code>iOS&lt;/code>上，腾讯家的&lt;code>perfdog&lt;/code>本来还是十分好用的，但收费了就有点难受，而直接用&lt;code>Xcode&lt;/code>的&lt;code>Instruments&lt;/code>又对Mac有刚需，很难支撑公司的测试需求。此时看到&lt;a class="link" href="http://testerhome.com/topics/31066" target="_blank" rel="noopener"
>这个贴子&lt;/a>，上手跑了几次，还挺好用的，于是就顺着思路做了下去，有了这个比较完善的项目。&lt;/p>
&lt;p>当前支持获取的性能数据包括GPU、CPU、内存、FPS、功耗、网络、温度，以及一系列手机硬件数据，并将根据需求继续新增。&lt;/p>
&lt;p>本项目基于jlintxia开源的iOS测试方案修改而来，增加动态建表，动态增加grafana面板以及docker打包环境等特性。其中iOS性能数据来源于开源工具tidevice和py-ios-device。&lt;/p>
&lt;p>注意：本项目依赖MySQL进行性能数据存储，Grafana进行数据动态展示，也就是说需要在本机或者可达的网络（比如公司局域网） 上搭建MySQL+Grafana服务，我提供了一份docker-compose.yml文件，可以使用docker快速搭建一套环境。&lt;/p>
&lt;h2 id="相关工具">相关工具&lt;/h2>
&lt;h3 id="grafana">Grafana&lt;/h3>
&lt;p>&lt;a class="link" href="https://grafana.com/" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Grafana是一个跨平台、开源的数据可视化网络应用程序平台。用户配置连接的数据源之后，Grafana可以在网络浏览器里显示数据图表和警告。该软件的企业版本提供更多的扩展功能。扩展功能通过插件的形式提供，终端用户可以自定义自己的数据面板界面以及数据请求方式。&lt;/p>
&lt;/blockquote>
&lt;h3 id="mysql">MySQL&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.mysql.com/cn/" target="_blank" rel="noopener"
>官网&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>MySQL原本是一个开放源码的关系数据库管理系统，原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统收购。2009年，甲骨文公司收购昇阳微系统公司，MySQL成为Oracle旗下产品。&lt;/p>
&lt;/blockquote>
&lt;h3 id="py-ios-device">py-ios-device&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/YueChen-C/py-ios-device" target="_blank" rel="noopener"
>项目地址&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>win，mac 跨平台方案，通过 Instruments 私有协议获取 iOS 相关性能指标数据。&lt;/p>
&lt;p>相关文章链接:https://testerhome.com/topics/27159&lt;/p>
&lt;/blockquote>
&lt;h3 id="tidevice">tidevice&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/alibaba/taobao-iphone-device" target="_blank" rel="noopener"
>项目地址&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>tidevice 是阿里的内部的一个小组用来做 iOS 自动化用的工具，通过逆向iOS通信协议，使用纯Python实现。目前淘宝和其他部分事业部已经全面使用了该技术，进行iOS应用的性能采集，UI自动化。&lt;/p>
&lt;p>注：这里的被测应用无需做任何修改，使用不再局限于Mac上。&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用步骤">使用步骤&lt;/h2>
&lt;h3 id="准备工作">准备工作&lt;/h3>
&lt;p>服务端搭建依赖docker以及docker-compose，安装指南：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://dockerdocs.cn/get-docker/" target="_blank" rel="noopener"
>https://dockerdocs.cn/get-docker/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://dockerdocs.cn/get-started/08_using_compose/" target="_blank" rel="noopener"
>https://dockerdocs.cn/get-started/08_using_compose/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>运行测试依赖python3环境，安装指南：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://www.python.org/downloads/" target="_blank" rel="noopener"
>https://www.python.org/downloads/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="服务端搭建">服务端搭建&lt;/h4>
&lt;p>命令行运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker -v &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> docker-compose -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果能正常输出版本，如下，则表示docker环境正常，可以继续&lt;/p>
&lt;blockquote>
&lt;p>Docker version 20.10.8, build 3967b7d&lt;/p>
&lt;p>docker-compose version 1.29.2, build 5becea4c&lt;/p>
&lt;/blockquote>
&lt;p>拉取镜像并启动服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>提示：初次打开&lt;code>Grafana&lt;/code>时，系统会提示你修改密码，为了方便建议不修改，即保持账号密码均为&lt;code>admin&lt;/code>，否则在python运行指令中将要进行对应的传参。&lt;/strong>&lt;/p>
&lt;h4 id="本地环境搭建">本地环境搭建&lt;/h4>
&lt;p>命令行执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运行命令">运行命令&lt;/h3>
&lt;p>命令行执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python run.py --udid&lt;span class="o">=&lt;/span>00008110-001A4D483CF2801E &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--bundleid&lt;span class="o">=&lt;/span>com.apple.Preferences &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--grafana_host&lt;span class="o">=&lt;/span>localhost &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--grafana_port&lt;span class="o">=&lt;/span>&lt;span class="m">30000&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--grafana_user&lt;span class="o">=&lt;/span>admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--grafana_password&lt;span class="o">=&lt;/span>admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_host&lt;span class="o">=&lt;/span>localhost &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_port&lt;span class="o">=&lt;/span>&lt;span class="m">33306&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_username&lt;span class="o">=&lt;/span>root &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_password&lt;span class="o">=&lt;/span>admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_db&lt;span class="o">=&lt;/span>iOSPerformance
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="运行参数说明">运行参数说明&lt;/h4>
&lt;h5 id="建议修改参数">建议修改参数&lt;/h5>
&lt;blockquote>
&lt;ul>
&lt;li>&amp;ndash;bundleid：待测APP的包名，通过&lt;code>ideviceinstaller -l&lt;/code>获取，默认值为&lt;code>com.apple.Preferences&lt;/code>&lt;/li>
&lt;li>&amp;ndash;udid iPhone：手机的唯一标识符，通过 &lt;code>idevice_id -l&lt;/code> 获取，客户端只连接一台手机时不用写&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h5 id="grafana可选参数">Grafana可选参数&lt;/h5>
&lt;blockquote>
&lt;ul>
&lt;li>&amp;ndash;grafana_host：Grafana的主机地址，只写ip，不用写Scheme，也就是&lt;code>http://&lt;/code>或者&lt;code>https//&lt;/code>，默认值localhost&lt;/li>
&lt;li>&amp;ndash;grafana_port：Grafana的端口号，默认值30000&lt;/li>
&lt;li>&amp;ndash;grafana_user：Grafana的用户名，默认值admin&lt;/li>
&lt;li>&amp;ndash;grafana_password：Grafana的密码，默认值admin&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h5 id="mysql可选参数">MySQL可选参数&lt;/h5>
&lt;blockquote>
&lt;ul>
&lt;li>&amp;ndash;mysql_host：MySQL的主机地址，不用写Scheme，也就是&lt;code>http://&lt;/code>或者&lt;code>https//&lt;/code>，默认值localhost&lt;/li>
&lt;li>&amp;ndash;mysql_port：MySQL的端口号，默认值33306&lt;/li>
&lt;li>&amp;ndash;mysql_user：MySQL的用户名，默认值root&lt;/li>
&lt;li>&amp;ndash;mysql_password：MySQL的用户名，默认值admin&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="数据导出">数据导出&lt;/h3>
&lt;p>命令行执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python mysql.py --runid&lt;span class="o">=&lt;/span>iphone6_1008_1532 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_host&lt;span class="o">=&lt;/span>localhost &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_port&lt;span class="o">=&lt;/span>&lt;span class="m">33306&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_username&lt;span class="o">=&lt;/span>root &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_password&lt;span class="o">=&lt;/span>admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--mysql_db&lt;span class="o">=&lt;/span>iOSPerformance
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>--runid&lt;/code>为必须参数，可以从显示测试数据的Grafana页面的左上角找到，通常为手机名称+月日+时分。其余Mysql参数均为可选参数，默认值与上方&lt;a class="link" href="#MySQL%e5%8f%af%e9%80%89%e5%8f%82%e6%95%b0" >MySQL可选参数&lt;/a>相同。&lt;/p>
&lt;h2 id="心得">心得&lt;/h2>
&lt;p>Docker起服务实在是太方便了，grafana做可视化也很香。也很感慨现在测试开发方面的开源环境发展起来了，有很多现成的代码可以参考。&lt;/p>
&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>&lt;a class="link" href="https://perfdog.qq.com/" target="_blank" rel="noopener"
>PerfDog | 移动全平台性能测试分析专家&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://testerhome.com/topics/27159" target="_blank" rel="noopener"
>硬货来啦！！使用纯 python 实现 Instruments 协议，跨平台 (win,mac,linux) 获取 iOS 性能数据 · TesterHome&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://tech.taobao.org/news/lxhg5l" target="_blank" rel="noopener"
>新工具开源！一款iOS自动化利器（附地址）&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://testerhome.com/topics/31066" target="_blank" rel="noopener"
>实时可视化 iOS 性能数据 tidevice+pyiosdevice+mysql+grafana · TesterHome&lt;/a>&lt;/p></description></item><item><title>使用Heroku免费搭建的Miniflux RSS服务</title><link>https://yanbo92.site/miniflux-heroku/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>https://yanbo92.site/miniflux-heroku/</guid><description>&lt;img src="https://yanbo92.site/miniflux-heroku/cover.png" alt="Featured image of post 使用Heroku免费搭建的Miniflux RSS服务" />&lt;h2 id="何为rss">何为RSS&lt;/h2>
&lt;blockquote>
&lt;p>RSS（简易信息聚合，也叫Really Simple Syndication、聚合RSS、聚合内容），是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含了全文或是节录的文字，再加上发用者所订阅之网摘布数据和授权的元数据。通常在时效性比较强的内容上使用RSS订阅能更快速获取信息，网站提供RSS输出，有利于让用户获取网站内容的最新更新。网络用户可以在客户端借助于支持RSS的聚合工具软件（例如SharpReader、NewzCrawler、FeedDemon），在不打开网站内容页面的情况下阅读支持RSS输出的网站内容。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yanbo92.site/miniflux-heroku/the_power_of_rss.png"
width="500"
height="610"
srcset="https://yanbo92.site/miniflux-heroku/the_power_of_rss_hud420bf80fda3ee17d290808b9bec5d09_26692_480x0_resize_box_3.png 480w, https://yanbo92.site/miniflux-heroku/the_power_of_rss_hud420bf80fda3ee17d290808b9bec5d09_26692_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="the_power_of_rss"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>在信息碎片化严重的今天，内容平台连网页版都想砍掉，强制用户安装APP。拥有一套自己的RSS方案能让你更轻松的获得关注的信息，逃离推荐算法带来的信息茧房。&lt;/p>
&lt;h2 id="何为miniflux">何为Miniflux&lt;/h2>
&lt;p>&lt;code>Miniflux&lt;/code>是一个极简、快速、轻便且易于安装的&lt;code>Feed&lt;/code>订阅器，有如下特性&lt;/p>
&lt;ul>
&lt;li>支持自定义刷新和拉取时间，避免打开 RSS 时浏览过时（半小时、几个小时前）的信息&lt;/li>
&lt;li>极简&amp;amp;纯粹，FreshRSS 、Tiny Tiny RSS 无论从界面还是功能，都太重了。&lt;/li>
&lt;li>支持图片代理，即服务器缓存图片，默认情况下，客户端是从 RSS 源头拉取的图片，这个有特殊的场景。&lt;/li>
&lt;li>支持 Fever API ，可以跨平台。&lt;/li>
&lt;li>使用 WatchTower 实现 Miniflux docker 自动更新。&lt;/li>
&lt;li>Web 端支持快捷键。&lt;/li>
&lt;/ul>
&lt;h2 id="搭建教程">搭建教程&lt;/h2>
&lt;ul>
&lt;li>前往&lt;a class="link" href="https://www.heroku.com/" target="_blank" rel="noopener"
>Heroku&lt;/a>注册一个账号&lt;/li>
&lt;li>访问&lt;a class="link" href="https://github.com/anyuzu99/heroku-miniflux/tree/main" target="_blank" rel="noopener"
>anyuzu99/heroku-miniflux at main&lt;/a>&lt;/li>
&lt;li>注意确认切换到了&lt;code>main&lt;/code>分支，下拉到底，点击&lt;code>heroku button&lt;/code>超链接&lt;/li>
&lt;li>填入&lt;code>APP_NAME&lt;/code>以及&lt;code>ADMIN_PASSWORD&lt;/code>等等环境变量，点击&lt;code>Deploy&lt;/code>&lt;/li>
&lt;li>稍等几分钟，你的域名就可以访问啦&lt;/li>
&lt;li>附一份Miniflux的&lt;a class="link" href="https://miniflux.app/docs/configuration.html" target="_blank" rel="noopener"
>环境变量详解&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a class="link" href="https://miniflux.app/" target="_blank" rel="noopener"
>Miniflux - Minimalist and Opinionated Feed Reader&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.heroku.com/" target="_blank" rel="noopener"
>Cloud Application Platform | Heroku&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/anyuzu99/heroku-miniflux" target="_blank" rel="noopener"
>anyuzu99/heroku-miniflux: one click to deploy miniflux on heroku&lt;/a>&lt;/p></description></item><item><title>使用crash2json库将iOS崩溃日志解析成json文件</title><link>https://yanbo92.site/crash2json/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/crash2json/</guid><description>&lt;img src="https://yanbo92.site/crash2json/cover.png" alt="Featured image of post 使用crash2json库将iOS崩溃日志解析成json文件" />&lt;h2 id="项目背景">项目背景&lt;/h2>
&lt;ul>
&lt;li>为了对iOS崩溃日志进行进一步的分析，需要将崩溃日志中的信息拆分成不同的部分，取其中的一部分或者多个部分进行存储、对比，于是我写了一个python库将&lt;code>.crash&lt;/code>文件转换成&lt;code>.json&lt;/code>文件。&lt;/li>
&lt;li>鉴于Apple在iOS15上已经将崩溃文件存储成类似json的格式，本库仅在iOS15以下的版本发挥作用。&lt;/li>
&lt;/ul>
&lt;h2 id="操作步骤">操作步骤&lt;/h2>
&lt;h3 id="安装crash2json">安装crash2json&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pip install crash2json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="命令行直接运行">命令行直接运行&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">crash2json yourcrashreport.crash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他参数">其他参数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">positional arguments:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> crash_file&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>optional arguments:&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> -h, --help show this &lt;span class="nb">help&lt;/span> message and exit&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --binary_image_list_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse binary_image_list to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --crashed_thread_state_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse crashed_thread_state to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --diagnostic_messages_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse diagnostic_messages to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --exception_backtrace_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse exception_backtrace to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --exception_information_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse exception_information to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --header_only parse header to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --other_threads_backtrace_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse other_threads_backtrace to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> --thread0_backtrace_only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> parse thread0_backtrace to json only&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> -s, --simple output a simple json with only header, exceptionInfo, diagnositcMsg, Thread0Backtrace&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> -o OUTPUT_NAME, --output_name OUTPUT_NAME&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> the .json file you want to save result to, no need .json suffix&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="源码地址">源码地址&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/yanbo92/crash2json" target="_blank" rel="noopener"
>yanbo92/crash2json&lt;/a>&lt;/p></description></item><item><title>调用接口推送消息到你iPhone——iOS开源项目Bark</title><link>https://yanbo92.site/bark/</link><pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/bark/</guid><description>&lt;img src="https://yanbo92.site/bark/cover.png" alt="Featured image of post 调用接口推送消息到你iPhone——iOS开源项目Bark" />&lt;h2 id="最终效果">最终效果&lt;/h2>
&lt;ul>
&lt;li>通过特定的接口直接往iPhone上发送通知&lt;/li>
&lt;li>支持链接转跳&lt;/li>
&lt;li>支持一键复制&lt;/li>
&lt;li>支持自定义图标&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h2 id="项目介绍">项目介绍&lt;/h2>
&lt;blockquote>
&lt;p>传统通知方式例如邮件、聊天软件来做自动提醒还是略微麻烦。&lt;/p>
&lt;p>Bark提供http接口，简单调用即可给自己的iPhone发送推送。&lt;/p>
&lt;p>可以为你带来非常及时、稳定可靠、隐私安全的推送服务。&lt;/p>
&lt;p>Bark不会消耗设备的电量， 核心功能是基于系统推送服务与推送扩展，APP本体并不需要运行。&lt;/p>
&lt;p>Bark可以非常可靠的保证你的隐私安全。&lt;/p>
&lt;p>你可以手动或通过docker在自己的服务器上运行Bark服务端，或者自行实现服务端。&lt;/p>
&lt;p>数据将在 你的服务器-系统推送服务器-你的设备 之间传输，确保任何推送信息都不会被泄漏。&lt;/p>
&lt;p>APP 是通过 Github Action 编译上传，保证你使用的APP版本是由开源代码编译，未经任何人修改（验证方法请在 APP 内查看)。&lt;/p>
&lt;p>Bark保存在本地的通知消息历史也非常安全。&lt;/p>
&lt;p>通过 NotificationServiceExtension 扩展，在收到推送时将推送信息保存在本地，不会经过其他任何设备。&lt;/p>
&lt;p>历史记录仅由个人iCloud私有库进行同步，可以确保你产生的任何通知，将只留在你的设备与你的iCloud中&lt;/p>
&lt;/blockquote>
&lt;h4 id="相关链接">相关链接&lt;/h4>
&lt;p>&lt;a class="link" href="https://github.com/Finb/Bark" target="_blank" rel="noopener"
>项目主页&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://day.app/" target="_blank" rel="noopener"
>作者博客&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://apps.apple.com/cn/app/bark-customed-notifications/id1403753865" target="_blank" rel="noopener"
>App Store&lt;/a>&lt;/p>
&lt;h2 id="使用说明">使用说明&lt;/h2>
&lt;h3 id="内容推送">内容推送&lt;/h3>
&lt;ol>
&lt;li>打开APP，复制测试URL&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://yanbo92.site/bark/bark-cp.png"
width="414"
height="323"
srcset="https://yanbo92.site/bark/bark-cp_hu26275521d1d62e95f8478faa01cbdf8d_24659_480x0_resize_box_3.png 480w, https://yanbo92.site/bark/bark-cp_hu26275521d1d62e95f8478faa01cbdf8d_24659_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="back-cp"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;ol start="2">
&lt;li>修改内容，请求这个URL&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">可以发 get 或者 post 请求 ，请求成功会立即收到推送
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">URL 组成: 第一个部分是 key , 之后有三个匹配
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/:key/:body
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/:key/:title/:body
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/:key/:category/:title/:body
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">title 推送标题 比 body 字号粗一点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">body 推送内容 换行请使用换行符 &amp;#39;\n&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">category 另外的功能占用的字段，还没开放 忽略就行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">post 请求 参数名也是上面这些
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="复制参数">复制参数&lt;/h3>
&lt;p>收到推送时下拉推送（或在通知中心左滑查看推送）有一个&lt;code>复制&lt;/code>按钮，点击即可复制推送内容。&lt;/p>
&lt;p>&lt;img src="https://yanbo92.site/bark/bark-cp-btn.png"
width="690"
height="337"
srcset="https://yanbo92.site/bark/bark-cp-btn_hue4c9704d184be3c35188f5c7a8a724f2_20824_480x0_resize_box_3.png 480w, https://yanbo92.site/bark/bark-cp-btn_hue4c9704d184be3c35188f5c7a8a724f2_20824_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="back-cp-btn"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//将复制“验证码是9527”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//api.day.app/yourkey/验证码是9527
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>携带参数 automaticallyCopy=1， 收到推送时，推送内容会自动复制到粘贴板（如发现不能自动复制，可尝试重启一下手机）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//自动复制 “验证码是9527” 到粘贴板
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//api.day.app/yourkey/验证码是9527?automaticallyCopy=1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>携带copy参数， 则上面两种复制操作，将只复制copy参数的值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objc" data-lang="objc">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//自动复制 “9527” 到粘贴板
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//api.day.app/yourkey/验证码是9527?automaticallyCopy=1&amp;amp;copy=9527
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="其他参数">其他参数&lt;/h4>
&lt;ul>
&lt;li>url&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 点击推送将跳转到url的地址（发送时，URL参数需要编码）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://api.day.app/yourkey/百度网址?url=https://www.baidu.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>isArchive&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 指定是否需要保存推送信息到历史记录，1 为保存，其他值为不保存。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 如果不指定这个参数，推送信息将按照APP内设置来决定是否保存。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://api.day.app/yourkey/需要保存的推送?isArchive=1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>group&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 指定推送消息分组，可在历史记录中按分组查看推送。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://api.day.app/yourkey/需要分组的推送?group=groupName
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>icon (仅 iOS15 或以上支持）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 指定推送消息图标
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://api.day.app/yourkey/需要自定义图标的推送?icon=http://day.app/assets/images/avatar.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>时效性通知&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 设置时效性通知
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://api.day.app/yourkey/时效性通知?level=timeSensitive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 可选参数值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// active：不设置时的默认值，系统会立即亮屏显示通知。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// timeSensitive：时效性通知，可在专注状态下显示通知。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// passive：仅将通知添加到通知列表，不会亮屏提醒
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Mac电脑使用FastGithub加速并配置命令行代理、开机自动启动</title><link>https://yanbo92.site/fastgithub/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/fastgithub/</guid><description>&lt;img src="https://yanbo92.site/fastgithub/cover.png" alt="Featured image of post Mac电脑使用FastGithub加速并配置命令行代理、开机自动启动" />&lt;h2 id="最终效果">最终效果&lt;/h2>
&lt;p>浏览器、命令行低延迟访问github，刷项目、拉依赖访问正常&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="项目介绍">项目介绍&lt;/h2>
&lt;blockquote>
&lt;p>FastGithub是一款github加速神器，解决github打不开、用户头像无法加载、releases无法上传下载、git-clone、git-pull、git-push失败等问题。&lt;/p>
&lt;/blockquote>
&lt;h4 id="项目主页">项目主页&lt;/h4>
&lt;p>&lt;a class="link" href="https://github.com/dotnetcore/FastGithub" target="_blank" rel="noopener"
>FastGithub&lt;/a>&lt;/p>
&lt;h4 id="加速实现原理">加速实现原理&lt;/h4>
&lt;blockquote>
&lt;h4 id="windows">windows&lt;/h4>
&lt;ol>
&lt;li>客户端访问&lt;code>https://github.com&lt;/code>&lt;/li>
&lt;li>客户端向dns查询github.com的ip，FastGithub拦截dns数据包并伪造解析结果为127.0.0.1&lt;/li>
&lt;li>客户端请求到FastGithub的&lt;code>https://127.0.0.1:443&lt;/code>&lt;/li>
&lt;li>FastGithub使用fastgithub.cer颁发服务器证书给客户端&lt;/li>
&lt;li>FastGithub查询和计算github.com最快的ip&lt;/li>
&lt;li>FastGithub与github.com进行无sni的tls连接&lt;/li>
&lt;li>FastGithub将请求反向代理到&lt;code>https://github.com&lt;/code>&lt;/li>
&lt;/ol>
&lt;h4 id="linuxosx">linux/osx&lt;/h4>
&lt;ol>
&lt;li>客户端访问&lt;code>https://github.com&lt;/code>&lt;/li>
&lt;li>客户端使用fagithub的代理端口38457代理请求&lt;/li>
&lt;li>FastGithub将代理的流量请求到自身的反向代理服务&lt;/li>
&lt;li>FastGithub使用fastgithub.cer颁发服务器证书给客户端&lt;/li>
&lt;li>FastGithub查询和计算github.com最快的ip&lt;/li>
&lt;li>FastGithub与github.com进行无sni的tls连接&lt;/li>
&lt;li>FastGithub将请求反向代理到&lt;code>https://github.com&lt;/code>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="配置步骤">配置步骤&lt;/h2>
&lt;h4 id="下载解压文件">下载、解压文件&lt;/h4>
&lt;p>下载链接中的最新osx压缩包，命名类似&lt;code>fastgithub_osx-x64.zip&lt;/code>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/dotnetcore/fastgithub/releases" target="_blank" rel="noopener"
>Releases&lt;/a>&lt;/p>
&lt;h4 id="安装证书">安装证书&lt;/h4>
&lt;ul>
&lt;li>解压后，双击运行Unix可执行文件&lt;code>fastgithub&lt;/code>，同目录下将会生成cert目录&lt;/li>
&lt;li>双击cert目录中的&lt;code>fastgithub.cer&lt;/code>证书文件，并设置为信任方式为始终信任&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yanbo92.site/fastgithub/fastgithub-cert.png"
width="910"
height="114"
srcset="https://yanbo92.site/fastgithub/fastgithub-cert_hufee81b78d030254c20328c33ca672ce1_35280_480x0_resize_box_3.png 480w, https://yanbo92.site/fastgithub/fastgithub-cert_hufee81b78d030254c20328c33ca672ce1_35280_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="fastgithub-cert"
class="gallery-image"
data-flex-grow="798"
data-flex-basis="1915px"
>&lt;/p>
&lt;h4 id="设置代理">设置代理&lt;/h4>
&lt;p>系统代理&lt;/p>
&lt;ul>
&lt;li>
&lt;p>打开设置-网络，选择使用的网络模式，比如wifi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击左下角黄色锁，解锁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击高级，代理，勾选自动代理配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>填入URL：&lt;code>http://127.0.0.1:38457&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击右下角应用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yanbo92.site/fastgithub/fastgithub-system-proxy.png"
width="1304"
height="1012"
srcset="https://yanbo92.site/fastgithub/fastgithub-system-proxy_hu2403bf182684f638ef6549920b153e51_281438_480x0_resize_box_3.png 480w, https://yanbo92.site/fastgithub/fastgithub-system-proxy_hu2403bf182684f638ef6549920b153e51_281438_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="fastgithub-system-proxy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>&lt;/p>
&lt;p>命令行代理环境变量&lt;/p>
&lt;ul>
&lt;li>编辑&lt;code>~/.zshrc&lt;/code>或者&lt;code>~/.bashrc&lt;/code>，这取决于你的shell用哪种&lt;/li>
&lt;li>加入一行：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">export https_proxy=http://127.0.0.1:38457 http_proxy=http://127.0.0.1:38457
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>保存，并运行&lt;code>source ~/.zshrc&lt;/code>或者&lt;code>source ~/.bashrc&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="配置开机自启">配置开机自启&lt;/h4>
&lt;ul>
&lt;li>打开设置-用户与群组，选择用户&lt;/li>
&lt;li>选择登陆项，点击&lt;code>+&lt;/code>符号，选择&lt;code>fastgithub&lt;/code>的Unix可执行文件，并勾选隐藏。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yanbo92.site/fastgithub/fastgithub-auto-boot.png"
width="918"
height="696"
srcset="https://yanbo92.site/fastgithub/fastgithub-auto-boot_hud950bdb5d67851b2dfa8198fd629410f_201272_480x0_resize_box_3.png 480w, https://yanbo92.site/fastgithub/fastgithub-auto-boot_hud950bdb5d67851b2dfa8198fd629410f_201272_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="fastgithub-auto-boot"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p></description></item><item><title>使用Dockerfile和docker-compose搭建Sonar+PostgreSQL代码扫描服务</title><link>https://yanbo92.site/sonar-docker/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://yanbo92.site/sonar-docker/</guid><description>&lt;img src="https://yanbo92.site/sonar-docker/cover.png" alt="Featured image of post 使用Dockerfile和docker-compose搭建Sonar+PostgreSQL代码扫描服务" />&lt;h2 id="项目背景">项目背景&lt;/h2>
&lt;ul>
&lt;li>由于调试插件冲突需要，经常重装Sonar，但插件又要重新安装，于是自定义一个Dockerfile来预装我需要的插件，做成镜像&lt;/li>
&lt;li>另外，Sonar自带的数据库较弱，官方只建议调试使用，并且会永远有一个Banner提示你更换数据库，所以使用docker-compose把Sonar和PostgreSQL数据库的镜像编排起来，一起搭建&lt;/li>
&lt;li>默认环境：已安装docker和docker-compose&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h2 id="操作步骤">操作步骤&lt;/h2>
&lt;h4 id="新建项目目录">新建项目目录&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mkdir sonar_postgres &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> sonar_postgres
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="新建dockerfile文件和docker-compose文件">新建Dockerfile文件和docker-compose文件&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">touch Dockerfile &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> touch docker-compose-yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="编辑dockerfile预装sonar插件">编辑Dockerfile，预装Sonar插件&lt;/h4>
&lt;p>Dockerfile文件内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> sonarqube:8.9-community&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> wget -P /opt/sonarqube/extensions/plugins/ https://github.com/xuhuisheng/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-8.9/sonar-l10n-zh-plugin-8.9.jar&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> wget -P /opt/sonarqube/extensions/plugins/ https://github.com/tal-tech/sonar-swift/releases/download/1.5.1/tal-sonar-swift-plugin-1.5.1.jar&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> wget -P /opt/sonarqube/extensions/plugins/ https://github.com/detekt/sonar-kotlin/releases/download/2.3.0/sonar-detekt-2.3.0.jar&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用最新版本的Sonar Community版，安装中文插件、swift插件以及kotlin插件。此处使用最粗暴的下载、拷贝jar文件的安装方法。通过挂载存储也可以实现相同的功能。&lt;/p>
&lt;h4 id="根据dockerfile构建镜像">根据Dockerfile构建镜像&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker build -t sonarqube_plugins:v1 .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此处&lt;code>-t&lt;/code>后面的第一个参数为镜像名字以及版本，第二个参数&lt;code>.&lt;/code>为Dockerfile所在目录，下面使用docker-compose时将会用到镜像名字以及版本&lt;/p>
&lt;h4 id="使用docker-compose编排镜像">使用docker-compose编排镜像&lt;/h4>
&lt;p>编辑文件docker-compose.yml：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">version: &amp;#34;3&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sonarqube:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: sonarqube_plugins:v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expose:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 9000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;9000:9000&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - sonarnet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - sonar.jdbc.url=jdbc:postgresql://db:5432/sonar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - sonar.jdbc.username=sonar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - sonar.jdbc.password=sonar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> db:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: postgres
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - sonarnet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - POSTGRES_USER=sonar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - POSTGRES_PASSWORD=sonar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sonarnet:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="启动容器">启动容器&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时在浏览器访问localhost:9000就能看到Sonar了&lt;/p></description></item></channel></rss>